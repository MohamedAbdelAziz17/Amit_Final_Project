
SlaveMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000029ec  00002a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800092  00800092  00002ab2  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  00002ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011b3  00000000  00000000  00004c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009964  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a51f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 13 	call	0x2760	; 0x2760 <main>
      8a:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MCAL_DIO_voidSetPortDirection>:
#include "AVR_DIO_REG.h"

#include "DIO_interface.h"
// the whole DDR register 
void MCAL_DIO_voidSetPortDirection(uint8_t Copy_u8PortNo  , uint8_t Copy_u8PortDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <MCAL_DIO_voidSetPortDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <MCAL_DIO_voidSetPortDirection+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNo)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	d1 f0       	breq	.+52     	; 0xb9e <MCAL_DIO_voidSetPortDirection+0x58>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <MCAL_DIO_voidSetPortDirection+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <MCAL_DIO_voidSetPortDirection+0x4e>
     b7c:	1e c0       	rjmp	.+60     	; 0xbba <MCAL_DIO_voidSetPortDirection+0x74>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	81 f0       	breq	.+32     	; 0xba8 <MCAL_DIO_voidSetPortDirection+0x62>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	81 f0       	breq	.+32     	; 0xbb2 <MCAL_DIO_voidSetPortDirection+0x6c>
     b92:	13 c0       	rjmp	.+38     	; 0xbba <MCAL_DIO_voidSetPortDirection+0x74>
		{
		case DIO_PORTA :
			DDRA = Copy_u8PortDirection ;
     b94:	ea e3       	ldi	r30, 0x3A	; 58
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	80 83       	st	Z, r24
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <MCAL_DIO_voidSetPortDirection+0x74>
			break ;
		case DIO_PORTB :
			DDRB = Copy_u8PortDirection ;
     b9e:	e7 e3       	ldi	r30, 0x37	; 55
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	80 83       	st	Z, r24
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <MCAL_DIO_voidSetPortDirection+0x74>
				break ;
		case DIO_PORTC :
			DDRC = Copy_u8PortDirection ;
     ba8:	e4 e3       	ldi	r30, 0x34	; 52
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	80 83       	st	Z, r24
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <MCAL_DIO_voidSetPortDirection+0x74>
				break ;
		case DIO_PORTD :
			DDRD = Copy_u8PortDirection ;
     bb2:	e1 e3       	ldi	r30, 0x31	; 49
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	80 83       	st	Z, r24
				break ;

		}

}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <MCAL_DIO_voidSetPinDirection>:
// single BIT direction
void MCAL_DIO_voidSetPinDirection(uint8_t Copy_u8PortNo , uint8_t Copy_u8PinNo , uint8_t Copy_u8PinDirection)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <MCAL_DIO_voidSetPinDirection+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <MCAL_DIO_voidSetPinDirection+0x8>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	89 83       	std	Y+1, r24	; 0x01
     bd8:	6a 83       	std	Y+2, r22	; 0x02
     bda:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortNo)
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	3d 83       	std	Y+5, r19	; 0x05
     be4:	2c 83       	std	Y+4, r18	; 0x04
     be6:	6c 81       	ldd	r22, Y+4	; 0x04
     be8:	7d 81       	ldd	r23, Y+5	; 0x05
     bea:	61 30       	cpi	r22, 0x01	; 1
     bec:	71 05       	cpc	r23, r1
     bee:	d1 f1       	breq	.+116    	; 0xc64 <MCAL_DIO_voidSetPinDirection+0x9c>
     bf0:	8c 81       	ldd	r24, Y+4	; 0x04
     bf2:	9d 81       	ldd	r25, Y+5	; 0x05
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	91 05       	cpc	r25, r1
     bf8:	34 f4       	brge	.+12     	; 0xc06 <MCAL_DIO_voidSetPinDirection+0x3e>
     bfa:	2c 81       	ldd	r18, Y+4	; 0x04
     bfc:	3d 81       	ldd	r19, Y+5	; 0x05
     bfe:	21 15       	cp	r18, r1
     c00:	31 05       	cpc	r19, r1
     c02:	71 f0       	breq	.+28     	; 0xc20 <MCAL_DIO_voidSetPinDirection+0x58>
     c04:	94 c0       	rjmp	.+296    	; 0xd2e <MCAL_DIO_voidSetPinDirection+0x166>
     c06:	6c 81       	ldd	r22, Y+4	; 0x04
     c08:	7d 81       	ldd	r23, Y+5	; 0x05
     c0a:	62 30       	cpi	r22, 0x02	; 2
     c0c:	71 05       	cpc	r23, r1
     c0e:	09 f4       	brne	.+2      	; 0xc12 <MCAL_DIO_voidSetPinDirection+0x4a>
     c10:	4b c0       	rjmp	.+150    	; 0xca8 <MCAL_DIO_voidSetPinDirection+0xe0>
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	9d 81       	ldd	r25, Y+5	; 0x05
     c16:	83 30       	cpi	r24, 0x03	; 3
     c18:	91 05       	cpc	r25, r1
     c1a:	09 f4       	brne	.+2      	; 0xc1e <MCAL_DIO_voidSetPinDirection+0x56>
     c1c:	67 c0       	rjmp	.+206    	; 0xcec <MCAL_DIO_voidSetPinDirection+0x124>
     c1e:	87 c0       	rjmp	.+270    	; 0xd2e <MCAL_DIO_voidSetPinDirection+0x166>
	{
	case DIO_PORTA :
		ASSIGN_BIT(DDRA , Copy_u8PinNo , Copy_u8PinDirection);
     c20:	aa e3       	ldi	r26, 0x3A	; 58
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ea e3       	ldi	r30, 0x3A	; 58
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <MCAL_DIO_voidSetPinDirection+0x74>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	2a 95       	dec	r18
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <MCAL_DIO_voidSetPinDirection+0x70>
     c40:	80 95       	com	r24
     c42:	48 23       	and	r20, r24
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	b9 01       	movw	r22, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <MCAL_DIO_voidSetPinDirection+0x90>
     c54:	66 0f       	add	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	8a 95       	dec	r24
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <MCAL_DIO_voidSetPinDirection+0x8c>
     c5c:	cb 01       	movw	r24, r22
     c5e:	84 2b       	or	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	65 c0       	rjmp	.+202    	; 0xd2e <MCAL_DIO_voidSetPinDirection+0x166>
		break ;
	case DIO_PORTB :
		ASSIGN_BIT(DDRB , Copy_u8PinNo , Copy_u8PinDirection);
     c64:	a7 e3       	ldi	r26, 0x37	; 55
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e7 e3       	ldi	r30, 0x37	; 55
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <MCAL_DIO_voidSetPinDirection+0xb8>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	2a 95       	dec	r18
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <MCAL_DIO_voidSetPinDirection+0xb4>
     c84:	80 95       	com	r24
     c86:	48 23       	and	r20, r24
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	b9 01       	movw	r22, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <MCAL_DIO_voidSetPinDirection+0xd4>
     c98:	66 0f       	add	r22, r22
     c9a:	77 1f       	adc	r23, r23
     c9c:	8a 95       	dec	r24
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <MCAL_DIO_voidSetPinDirection+0xd0>
     ca0:	cb 01       	movw	r24, r22
     ca2:	84 2b       	or	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	43 c0       	rjmp	.+134    	; 0xd2e <MCAL_DIO_voidSetPinDirection+0x166>
			break ;
	case DIO_PORTC :
		ASSIGN_BIT(DDRC , Copy_u8PinNo , Copy_u8PinDirection);
     ca8:	a4 e3       	ldi	r26, 0x34	; 52
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e4 e3       	ldi	r30, 0x34	; 52
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <MCAL_DIO_voidSetPinDirection+0xfc>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	2a 95       	dec	r18
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <MCAL_DIO_voidSetPinDirection+0xf8>
     cc8:	80 95       	com	r24
     cca:	48 23       	and	r20, r24
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	b9 01       	movw	r22, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <MCAL_DIO_voidSetPinDirection+0x118>
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	8a 95       	dec	r24
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <MCAL_DIO_voidSetPinDirection+0x114>
     ce4:	cb 01       	movw	r24, r22
     ce6:	84 2b       	or	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	21 c0       	rjmp	.+66     	; 0xd2e <MCAL_DIO_voidSetPinDirection+0x166>
			break ;
	case DIO_PORTD :
		ASSIGN_BIT(DDRD , Copy_u8PinNo , Copy_u8PinDirection);
     cec:	a1 e3       	ldi	r26, 0x31	; 49
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e1 e3       	ldi	r30, 0x31	; 49
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <MCAL_DIO_voidSetPinDirection+0x140>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	2a 95       	dec	r18
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <MCAL_DIO_voidSetPinDirection+0x13c>
     d0c:	80 95       	com	r24
     d0e:	48 23       	and	r20, r24
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	b9 01       	movw	r22, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <MCAL_DIO_voidSetPinDirection+0x15c>
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	8a 95       	dec	r24
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <MCAL_DIO_voidSetPinDirection+0x158>
     d28:	cb 01       	movw	r24, r22
     d2a:	84 2b       	or	r24, r20
     d2c:	8c 93       	st	X, r24
			break ;

	}
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <MCAL_DIO_voidSetPortValue>:

void MCAL_DIO_voidSetPortValue(uint8_t Copy_u8PortNo  , uint8_t Copy_u8PortValue)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <MCAL_DIO_voidSetPortValue+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <MCAL_DIO_voidSetPortValue+0x8>
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortNo)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3c 83       	std	Y+4, r19	; 0x04
     d56:	2b 83       	std	Y+3, r18	; 0x03
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	91 05       	cpc	r25, r1
     d60:	d1 f0       	breq	.+52     	; 0xd96 <MCAL_DIO_voidSetPortValue+0x58>
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	31 05       	cpc	r19, r1
     d6a:	2c f4       	brge	.+10     	; 0xd76 <MCAL_DIO_voidSetPortValue+0x38>
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	61 f0       	breq	.+24     	; 0xd8c <MCAL_DIO_voidSetPortValue+0x4e>
     d74:	1e c0       	rjmp	.+60     	; 0xdb2 <MCAL_DIO_voidSetPortValue+0x74>
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	3c 81       	ldd	r19, Y+4	; 0x04
     d7a:	22 30       	cpi	r18, 0x02	; 2
     d7c:	31 05       	cpc	r19, r1
     d7e:	81 f0       	breq	.+32     	; 0xda0 <MCAL_DIO_voidSetPortValue+0x62>
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	91 05       	cpc	r25, r1
     d88:	81 f0       	breq	.+32     	; 0xdaa <MCAL_DIO_voidSetPortValue+0x6c>
     d8a:	13 c0       	rjmp	.+38     	; 0xdb2 <MCAL_DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA :
			PORTA = Copy_u8PortValue ;
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	80 83       	st	Z, r24
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <MCAL_DIO_voidSetPortValue+0x74>
		break ;
		case DIO_PORTB :
			PORTB = Copy_u8PortValue ;
     d96:	e8 e3       	ldi	r30, 0x38	; 56
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	80 83       	st	Z, r24
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <MCAL_DIO_voidSetPortValue+0x74>
		break ;
		case DIO_PORTC :
			PORTC = Copy_u8PortValue ;
     da0:	e5 e3       	ldi	r30, 0x35	; 53
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	80 83       	st	Z, r24
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <MCAL_DIO_voidSetPortValue+0x74>
		break ;
		case DIO_PORTD :
			PORTD = Copy_u8PortValue ;
     daa:	e2 e3       	ldi	r30, 0x32	; 50
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	80 83       	st	Z, r24
		break ;

			}

}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <MCAL_DIO_voidSetPinValue>:
void MCAL_DIO_voidSetPinValue(uint8_t Copy_u8PortNo , uint8_t Copy_u8PinNo , uint8_t Copy_u8PinValue)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <MCAL_DIO_voidSetPinValue+0x6>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <MCAL_DIO_voidSetPinValue+0x8>
     dc8:	0f 92       	push	r0
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	6a 83       	std	Y+2, r22	; 0x02
     dd2:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortNo)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3d 83       	std	Y+5, r19	; 0x05
     ddc:	2c 83       	std	Y+4, r18	; 0x04
     dde:	6c 81       	ldd	r22, Y+4	; 0x04
     de0:	7d 81       	ldd	r23, Y+5	; 0x05
     de2:	61 30       	cpi	r22, 0x01	; 1
     de4:	71 05       	cpc	r23, r1
     de6:	d1 f1       	breq	.+116    	; 0xe5c <MCAL_DIO_voidSetPinValue+0x9c>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	91 05       	cpc	r25, r1
     df0:	34 f4       	brge	.+12     	; 0xdfe <MCAL_DIO_voidSetPinValue+0x3e>
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	21 15       	cp	r18, r1
     df8:	31 05       	cpc	r19, r1
     dfa:	71 f0       	breq	.+28     	; 0xe18 <MCAL_DIO_voidSetPinValue+0x58>
     dfc:	94 c0       	rjmp	.+296    	; 0xf26 <MCAL_DIO_voidSetPinValue+0x166>
     dfe:	6c 81       	ldd	r22, Y+4	; 0x04
     e00:	7d 81       	ldd	r23, Y+5	; 0x05
     e02:	62 30       	cpi	r22, 0x02	; 2
     e04:	71 05       	cpc	r23, r1
     e06:	09 f4       	brne	.+2      	; 0xe0a <MCAL_DIO_voidSetPinValue+0x4a>
     e08:	4b c0       	rjmp	.+150    	; 0xea0 <MCAL_DIO_voidSetPinValue+0xe0>
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	83 30       	cpi	r24, 0x03	; 3
     e10:	91 05       	cpc	r25, r1
     e12:	09 f4       	brne	.+2      	; 0xe16 <MCAL_DIO_voidSetPinValue+0x56>
     e14:	67 c0       	rjmp	.+206    	; 0xee4 <MCAL_DIO_voidSetPinValue+0x124>
     e16:	87 c0       	rjmp	.+270    	; 0xf26 <MCAL_DIO_voidSetPinValue+0x166>
	{
		case DIO_PORTA :
			ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8PinValue);
     e18:	ab e3       	ldi	r26, 0x3B	; 59
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	eb e3       	ldi	r30, 0x3B	; 59
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <MCAL_DIO_voidSetPinValue+0x74>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	2a 95       	dec	r18
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <MCAL_DIO_voidSetPinValue+0x70>
     e38:	80 95       	com	r24
     e3a:	48 23       	and	r20, r24
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	b9 01       	movw	r22, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <MCAL_DIO_voidSetPinValue+0x90>
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	8a 95       	dec	r24
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <MCAL_DIO_voidSetPinValue+0x8c>
     e54:	cb 01       	movw	r24, r22
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	65 c0       	rjmp	.+202    	; 0xf26 <MCAL_DIO_voidSetPinValue+0x166>
		break ;
		case DIO_PORTB :
			ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8PinValue);
     e5c:	a8 e3       	ldi	r26, 0x38	; 56
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e8 e3       	ldi	r30, 0x38	; 56
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <MCAL_DIO_voidSetPinValue+0xb8>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	2a 95       	dec	r18
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <MCAL_DIO_voidSetPinValue+0xb4>
     e7c:	80 95       	com	r24
     e7e:	48 23       	and	r20, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	b9 01       	movw	r22, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <MCAL_DIO_voidSetPinValue+0xd4>
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	8a 95       	dec	r24
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <MCAL_DIO_voidSetPinValue+0xd0>
     e98:	cb 01       	movw	r24, r22
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	43 c0       	rjmp	.+134    	; 0xf26 <MCAL_DIO_voidSetPinValue+0x166>
		break ;
		case DIO_PORTC :
			ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8PinValue);
     ea0:	a8 e3       	ldi	r26, 0x38	; 56
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e8 e3       	ldi	r30, 0x38	; 56
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <MCAL_DIO_voidSetPinValue+0xfc>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	2a 95       	dec	r18
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <MCAL_DIO_voidSetPinValue+0xf8>
     ec0:	80 95       	com	r24
     ec2:	48 23       	and	r20, r24
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	b9 01       	movw	r22, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <MCAL_DIO_voidSetPinValue+0x118>
     ed4:	66 0f       	add	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	8a 95       	dec	r24
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <MCAL_DIO_voidSetPinValue+0x114>
     edc:	cb 01       	movw	r24, r22
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	21 c0       	rjmp	.+66     	; 0xf26 <MCAL_DIO_voidSetPinValue+0x166>
		break ;
		case DIO_PORTD :
			ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8PinValue);
     ee4:	a8 e3       	ldi	r26, 0x38	; 56
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e3       	ldi	r30, 0x38	; 56
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <MCAL_DIO_voidSetPinValue+0x140>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	2a 95       	dec	r18
     f02:	e2 f7       	brpl	.-8      	; 0xefc <MCAL_DIO_voidSetPinValue+0x13c>
     f04:	80 95       	com	r24
     f06:	48 23       	and	r20, r24
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	b9 01       	movw	r22, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <MCAL_DIO_voidSetPinValue+0x15c>
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	8a 95       	dec	r24
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <MCAL_DIO_voidSetPinValue+0x158>
     f20:	cb 01       	movw	r24, r22
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
		break ;

			}


}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <MCAL_DIO_voidGetPortValue>:

void MCAL_DIO_voidGetPortValue(uint8_t Copy_u8PortNo  , uint8_t *ptr_u8PortValue)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <MCAL_DIO_voidGetPortValue+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <MCAL_DIO_voidGetPortValue+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	7b 83       	std	Y+3, r23	; 0x03
     f48:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNo)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3d 83       	std	Y+5, r19	; 0x05
     f52:	2c 83       	std	Y+4, r18	; 0x04
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	e1 f0       	breq	.+56     	; 0xf96 <MCAL_DIO_voidGetPortValue+0x60>
     f5e:	2c 81       	ldd	r18, Y+4	; 0x04
     f60:	3d 81       	ldd	r19, Y+5	; 0x05
     f62:	22 30       	cpi	r18, 0x02	; 2
     f64:	31 05       	cpc	r19, r1
     f66:	2c f4       	brge	.+10     	; 0xf72 <MCAL_DIO_voidGetPortValue+0x3c>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	61 f0       	breq	.+24     	; 0xf88 <MCAL_DIO_voidGetPortValue+0x52>
     f70:	26 c0       	rjmp	.+76     	; 0xfbe <MCAL_DIO_voidGetPortValue+0x88>
     f72:	2c 81       	ldd	r18, Y+4	; 0x04
     f74:	3d 81       	ldd	r19, Y+5	; 0x05
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	a1 f0       	breq	.+40     	; 0xfa4 <MCAL_DIO_voidGetPortValue+0x6e>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	b1 f0       	breq	.+44     	; 0xfb2 <MCAL_DIO_voidGetPortValue+0x7c>
     f86:	1b c0       	rjmp	.+54     	; 0xfbe <MCAL_DIO_voidGetPortValue+0x88>
	{
		case DIO_PORTA :
			*ptr_u8PortValue = PINA ;
     f88:	e9 e3       	ldi	r30, 0x39	; 57
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	ea 81       	ldd	r30, Y+2	; 0x02
     f90:	fb 81       	ldd	r31, Y+3	; 0x03
     f92:	80 83       	st	Z, r24
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <MCAL_DIO_voidGetPortValue+0x88>
		break ;
		case DIO_PORTB :
			*ptr_u8PortValue = PINB ;
     f96:	e6 e3       	ldi	r30, 0x36	; 54
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	ea 81       	ldd	r30, Y+2	; 0x02
     f9e:	fb 81       	ldd	r31, Y+3	; 0x03
     fa0:	80 83       	st	Z, r24
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <MCAL_DIO_voidGetPortValue+0x88>
		break ;
		case DIO_PORTC :
			*ptr_u8PortValue = PINC ;
     fa4:	e3 e3       	ldi	r30, 0x33	; 51
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	ea 81       	ldd	r30, Y+2	; 0x02
     fac:	fb 81       	ldd	r31, Y+3	; 0x03
     fae:	80 83       	st	Z, r24
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <MCAL_DIO_voidGetPortValue+0x88>
		break ;
		case DIO_PORTD :
			*ptr_u8PortValue = PIND ;
     fb2:	e0 e3       	ldi	r30, 0x30	; 48
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	ea 81       	ldd	r30, Y+2	; 0x02
     fba:	fb 81       	ldd	r31, Y+3	; 0x03
     fbc:	80 83       	st	Z, r24
		break ;

	}

}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <MCAL_DIO_voidGetPinValue>:
void MCAL_DIO_voidGetPinValue(uint8_t Copy_u8PortNo , uint8_t Copy_u8PinNo , uint8_t *ptr_u8PortValue)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <MCAL_DIO_voidGetPinValue+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <MCAL_DIO_voidGetPinValue+0x8>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <MCAL_DIO_voidGetPinValue+0xa>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	6a 83       	std	Y+2, r22	; 0x02
     fe0:	5c 83       	std	Y+4, r21	; 0x04
     fe2:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortNo)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3e 83       	std	Y+6, r19	; 0x06
     fec:	2d 83       	std	Y+5, r18	; 0x05
     fee:	4d 81       	ldd	r20, Y+5	; 0x05
     ff0:	5e 81       	ldd	r21, Y+6	; 0x06
     ff2:	41 30       	cpi	r20, 0x01	; 1
     ff4:	51 05       	cpc	r21, r1
     ff6:	59 f1       	breq	.+86     	; 0x104e <MCAL_DIO_voidGetPinValue+0x80>
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	91 05       	cpc	r25, r1
    1000:	34 f4       	brge	.+12     	; 0x100e <MCAL_DIO_voidGetPinValue+0x40>
    1002:	2d 81       	ldd	r18, Y+5	; 0x05
    1004:	3e 81       	ldd	r19, Y+6	; 0x06
    1006:	21 15       	cp	r18, r1
    1008:	31 05       	cpc	r19, r1
    100a:	69 f0       	breq	.+26     	; 0x1026 <MCAL_DIO_voidGetPinValue+0x58>
    100c:	5b c0       	rjmp	.+182    	; 0x10c4 <MCAL_DIO_voidGetPinValue+0xf6>
    100e:	4d 81       	ldd	r20, Y+5	; 0x05
    1010:	5e 81       	ldd	r21, Y+6	; 0x06
    1012:	42 30       	cpi	r20, 0x02	; 2
    1014:	51 05       	cpc	r21, r1
    1016:	79 f1       	breq	.+94     	; 0x1076 <MCAL_DIO_voidGetPinValue+0xa8>
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <MCAL_DIO_voidGetPinValue+0x56>
    1022:	3d c0       	rjmp	.+122    	; 0x109e <MCAL_DIO_voidGetPinValue+0xd0>
    1024:	4f c0       	rjmp	.+158    	; 0x10c4 <MCAL_DIO_voidGetPinValue+0xf6>
	{
		case DIO_PORTA :
			*ptr_u8PortValue = GET_BIT(PINA , Copy_u8PinNo);
    1026:	e9 e3       	ldi	r30, 0x39	; 57
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <MCAL_DIO_voidGetPinValue+0x70>
    103a:	55 95       	asr	r21
    103c:	47 95       	ror	r20
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <MCAL_DIO_voidGetPinValue+0x6c>
    1042:	ca 01       	movw	r24, r20
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	eb 81       	ldd	r30, Y+3	; 0x03
    1048:	fc 81       	ldd	r31, Y+4	; 0x04
    104a:	80 83       	st	Z, r24
    104c:	3b c0       	rjmp	.+118    	; 0x10c4 <MCAL_DIO_voidGetPinValue+0xf6>
		break ;
		case DIO_PORTB :
			*ptr_u8PortValue = GET_BIT(PINB , Copy_u8PinNo);
    104e:	e6 e3       	ldi	r30, 0x36	; 54
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a9 01       	movw	r20, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <MCAL_DIO_voidGetPinValue+0x98>
    1062:	55 95       	asr	r21
    1064:	47 95       	ror	r20
    1066:	8a 95       	dec	r24
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <MCAL_DIO_voidGetPinValue+0x94>
    106a:	ca 01       	movw	r24, r20
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	eb 81       	ldd	r30, Y+3	; 0x03
    1070:	fc 81       	ldd	r31, Y+4	; 0x04
    1072:	80 83       	st	Z, r24
    1074:	27 c0       	rjmp	.+78     	; 0x10c4 <MCAL_DIO_voidGetPinValue+0xf6>
		break ;
		case DIO_PORTC :
			*ptr_u8PortValue = GET_BIT(PINC , Copy_u8PinNo);
    1076:	e3 e3       	ldi	r30, 0x33	; 51
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <MCAL_DIO_voidGetPinValue+0xc0>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <MCAL_DIO_voidGetPinValue+0xbc>
    1092:	ca 01       	movw	r24, r20
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	eb 81       	ldd	r30, Y+3	; 0x03
    1098:	fc 81       	ldd	r31, Y+4	; 0x04
    109a:	80 83       	st	Z, r24
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <MCAL_DIO_voidGetPinValue+0xf6>
		break ;
		case DIO_PORTD :
			*ptr_u8PortValue = GET_BIT(PIND , Copy_u8PinNo);
    109e:	e0 e3       	ldi	r30, 0x30	; 48
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <MCAL_DIO_voidGetPinValue+0xe8>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <MCAL_DIO_voidGetPinValue+0xe4>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	eb 81       	ldd	r30, Y+3	; 0x03
    10c0:	fc 81       	ldd	r31, Y+4	; 0x04
    10c2:	80 83       	st	Z, r24
		break ;

	}

}
    10c4:	26 96       	adiw	r28, 0x06	; 6
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <MCAL_DIO_voidSetPortInputType>:

void MCAL_DIO_voidSetPortInputType(uint8_t Copy_u8PortNo  , uint8_t Copy_u8PortValue)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <MCAL_DIO_voidSetPortInputType+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <MCAL_DIO_voidSetPortInputType+0x8>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortNo)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3c 83       	std	Y+4, r19	; 0x04
    10ee:	2b 83       	std	Y+3, r18	; 0x03
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	d1 f0       	breq	.+52     	; 0x112e <MCAL_DIO_voidSetPortInputType+0x58>
    10fa:	2b 81       	ldd	r18, Y+3	; 0x03
    10fc:	3c 81       	ldd	r19, Y+4	; 0x04
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	2c f4       	brge	.+10     	; 0x110e <MCAL_DIO_voidSetPortInputType+0x38>
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	61 f0       	breq	.+24     	; 0x1124 <MCAL_DIO_voidSetPortInputType+0x4e>
    110c:	1e c0       	rjmp	.+60     	; 0x114a <MCAL_DIO_voidSetPortInputType+0x74>
    110e:	2b 81       	ldd	r18, Y+3	; 0x03
    1110:	3c 81       	ldd	r19, Y+4	; 0x04
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	81 f0       	breq	.+32     	; 0x1138 <MCAL_DIO_voidSetPortInputType+0x62>
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <MCAL_DIO_voidSetPortInputType+0x6c>
    1122:	13 c0       	rjmp	.+38     	; 0x114a <MCAL_DIO_voidSetPortInputType+0x74>
		{
			case DIO_PORTA :
				PORTA = Copy_u8PortValue ;
    1124:	eb e3       	ldi	r30, 0x3B	; 59
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	0e c0       	rjmp	.+28     	; 0x114a <MCAL_DIO_voidSetPortInputType+0x74>
			break ;
			case DIO_PORTB :
				PORTB = Copy_u8PortValue ;
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	09 c0       	rjmp	.+18     	; 0x114a <MCAL_DIO_voidSetPortInputType+0x74>
			break ;
			case DIO_PORTC :
				PORTC = Copy_u8PortValue ;
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
    1140:	04 c0       	rjmp	.+8      	; 0x114a <MCAL_DIO_voidSetPortInputType+0x74>
			break ;
			case DIO_PORTD :
				PORTD = Copy_u8PortValue ;
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
			break ;

				}

}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <MCAL_DIO_voidSetPinInputType>:
void MCAL_DIO_voidSetPinInputType(uint8_t Copy_u8PortNo , uint8_t Copy_u8PinNo , uint8_t Copy_u8PinValue)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <MCAL_DIO_voidSetPinInputType+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <MCAL_DIO_voidSetPinInputType+0x8>
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
    116a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortNo)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3d 83       	std	Y+5, r19	; 0x05
    1174:	2c 83       	std	Y+4, r18	; 0x04
    1176:	6c 81       	ldd	r22, Y+4	; 0x04
    1178:	7d 81       	ldd	r23, Y+5	; 0x05
    117a:	61 30       	cpi	r22, 0x01	; 1
    117c:	71 05       	cpc	r23, r1
    117e:	d1 f1       	breq	.+116    	; 0x11f4 <MCAL_DIO_voidSetPinInputType+0x9c>
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	91 05       	cpc	r25, r1
    1188:	34 f4       	brge	.+12     	; 0x1196 <MCAL_DIO_voidSetPinInputType+0x3e>
    118a:	2c 81       	ldd	r18, Y+4	; 0x04
    118c:	3d 81       	ldd	r19, Y+5	; 0x05
    118e:	21 15       	cp	r18, r1
    1190:	31 05       	cpc	r19, r1
    1192:	71 f0       	breq	.+28     	; 0x11b0 <MCAL_DIO_voidSetPinInputType+0x58>
    1194:	94 c0       	rjmp	.+296    	; 0x12be <MCAL_DIO_voidSetPinInputType+0x166>
    1196:	6c 81       	ldd	r22, Y+4	; 0x04
    1198:	7d 81       	ldd	r23, Y+5	; 0x05
    119a:	62 30       	cpi	r22, 0x02	; 2
    119c:	71 05       	cpc	r23, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <MCAL_DIO_voidSetPinInputType+0x4a>
    11a0:	4b c0       	rjmp	.+150    	; 0x1238 <MCAL_DIO_voidSetPinInputType+0xe0>
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	9d 81       	ldd	r25, Y+5	; 0x05
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	91 05       	cpc	r25, r1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <MCAL_DIO_voidSetPinInputType+0x56>
    11ac:	67 c0       	rjmp	.+206    	; 0x127c <MCAL_DIO_voidSetPinInputType+0x124>
    11ae:	87 c0       	rjmp	.+270    	; 0x12be <MCAL_DIO_voidSetPinInputType+0x166>
		{
			case DIO_PORTA :
				ASSIGN_BIT(PORTA , Copy_u8PinNo , Copy_u8PinValue);
    11b0:	ab e3       	ldi	r26, 0x3B	; 59
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <MCAL_DIO_voidSetPinInputType+0x74>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	2a 95       	dec	r18
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <MCAL_DIO_voidSetPinInputType+0x70>
    11d0:	80 95       	com	r24
    11d2:	48 23       	and	r20, r24
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	b9 01       	movw	r22, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <MCAL_DIO_voidSetPinInputType+0x90>
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <MCAL_DIO_voidSetPinInputType+0x8c>
    11ec:	cb 01       	movw	r24, r22
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	65 c0       	rjmp	.+202    	; 0x12be <MCAL_DIO_voidSetPinInputType+0x166>
			break ;
			case DIO_PORTB :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8PinValue);
    11f4:	a8 e3       	ldi	r26, 0x38	; 56
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e8 e3       	ldi	r30, 0x38	; 56
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <MCAL_DIO_voidSetPinInputType+0xb8>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	2a 95       	dec	r18
    1212:	e2 f7       	brpl	.-8      	; 0x120c <MCAL_DIO_voidSetPinInputType+0xb4>
    1214:	80 95       	com	r24
    1216:	48 23       	and	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	b9 01       	movw	r22, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <MCAL_DIO_voidSetPinInputType+0xd4>
    1228:	66 0f       	add	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	8a 95       	dec	r24
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <MCAL_DIO_voidSetPinInputType+0xd0>
    1230:	cb 01       	movw	r24, r22
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	43 c0       	rjmp	.+134    	; 0x12be <MCAL_DIO_voidSetPinInputType+0x166>
			break ;
			case DIO_PORTC :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8PinValue);
    1238:	a8 e3       	ldi	r26, 0x38	; 56
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e8 e3       	ldi	r30, 0x38	; 56
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <MCAL_DIO_voidSetPinInputType+0xfc>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	2a 95       	dec	r18
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <MCAL_DIO_voidSetPinInputType+0xf8>
    1258:	80 95       	com	r24
    125a:	48 23       	and	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	b9 01       	movw	r22, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <MCAL_DIO_voidSetPinInputType+0x118>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	8a 95       	dec	r24
    1272:	e2 f7       	brpl	.-8      	; 0x126c <MCAL_DIO_voidSetPinInputType+0x114>
    1274:	cb 01       	movw	r24, r22
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	21 c0       	rjmp	.+66     	; 0x12be <MCAL_DIO_voidSetPinInputType+0x166>
			break ;
			case DIO_PORTD :
				ASSIGN_BIT(PORTB , Copy_u8PinNo , Copy_u8PinValue);
    127c:	a8 e3       	ldi	r26, 0x38	; 56
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e3       	ldi	r30, 0x38	; 56
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <MCAL_DIO_voidSetPinInputType+0x140>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	2a 95       	dec	r18
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <MCAL_DIO_voidSetPinInputType+0x13c>
    129c:	80 95       	com	r24
    129e:	48 23       	and	r20, r24
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b9 01       	movw	r22, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <MCAL_DIO_voidSetPinInputType+0x15c>
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <MCAL_DIO_voidSetPinInputType+0x158>
    12b8:	cb 01       	movw	r24, r22
    12ba:	84 2b       	or	r24, r20
    12bc:	8c 93       	st	X, r24
			break ;

				}
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <HAL_LCD_voidReadData>:

static void HAL_LCD_voidWriteData(uint8_t Copy_u8Data);



void HAL_LCD_voidReadData(uint8_t *Copy_u8value){
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	ac 97       	sbiw	r28, 0x2c	; 44
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	9c a7       	std	Y+44, r25	; 0x2c
    12e4:	8b a7       	std	Y+43, r24	; 0x2b

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	63 e0       	ldi	r22, 0x03	; 3
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RS_PIN , DIO_HIGH); /*0 write Command */
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RW_PIN , DIO_HIGH); /*0 read */
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 ea       	ldi	r26, 0xA0	; 160
    130a:	b1 e4       	ldi	r27, 0x41	; 65
    130c:	8f a3       	std	Y+39, r24	; 0x27
    130e:	98 a7       	std	Y+40, r25	; 0x28
    1310:	a9 a7       	std	Y+41, r26	; 0x29
    1312:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1314:	6f a1       	ldd	r22, Y+39	; 0x27
    1316:	78 a5       	ldd	r23, Y+40	; 0x28
    1318:	89 a5       	ldd	r24, Y+41	; 0x29
    131a:	9a a5       	ldd	r25, Y+42	; 0x2a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	4a e7       	ldi	r20, 0x7A	; 122
    1322:	55 e4       	ldi	r21, 0x45	; 69
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	8b a3       	std	Y+35, r24	; 0x23
    132e:	9c a3       	std	Y+36, r25	; 0x24
    1330:	ad a3       	std	Y+37, r26	; 0x25
    1332:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1334:	6b a1       	ldd	r22, Y+35	; 0x23
    1336:	7c a1       	ldd	r23, Y+36	; 0x24
    1338:	8d a1       	ldd	r24, Y+37	; 0x25
    133a:	9e a1       	ldd	r25, Y+38	; 0x26
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1348:	88 23       	and	r24, r24
    134a:	2c f4       	brge	.+10     	; 0x1356 <HAL_LCD_voidReadData+0x88>
		__ticks = 1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9a a3       	std	Y+34, r25	; 0x22
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	3f c0       	rjmp	.+126    	; 0x13d4 <HAL_LCD_voidReadData+0x106>
	else if (__tmp > 65535)
    1356:	6b a1       	ldd	r22, Y+35	; 0x23
    1358:	7c a1       	ldd	r23, Y+36	; 0x24
    135a:	8d a1       	ldd	r24, Y+37	; 0x25
    135c:	9e a1       	ldd	r25, Y+38	; 0x26
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	57 e4       	ldi	r21, 0x47	; 71
    1366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    136a:	18 16       	cp	r1, r24
    136c:	4c f5       	brge	.+82     	; 0x13c0 <HAL_LCD_voidReadData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136e:	6f a1       	ldd	r22, Y+39	; 0x27
    1370:	78 a5       	ldd	r23, Y+40	; 0x28
    1372:	89 a5       	ldd	r24, Y+41	; 0x29
    1374:	9a a5       	ldd	r25, Y+42	; 0x2a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9a a3       	std	Y+34, r25	; 0x22
    1394:	89 a3       	std	Y+33, r24	; 0x21
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <HAL_LCD_voidReadData+0xe8>
    1398:	80 e9       	ldi	r24, 0x90	; 144
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	98 a3       	std	Y+32, r25	; 0x20
    139e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a2:	98 a1       	ldd	r25, Y+32	; 0x20
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <HAL_LCD_voidReadData+0xd6>
    13a8:	98 a3       	std	Y+32, r25	; 0x20
    13aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	89 a1       	ldd	r24, Y+33	; 0x21
    13ae:	9a a1       	ldd	r25, Y+34	; 0x22
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	9a a3       	std	Y+34, r25	; 0x22
    13b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b6:	89 a1       	ldd	r24, Y+33	; 0x21
    13b8:	9a a1       	ldd	r25, Y+34	; 0x22
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	69 f7       	brne	.-38     	; 0x1398 <HAL_LCD_voidReadData+0xca>
    13be:	14 c0       	rjmp	.+40     	; 0x13e8 <HAL_LCD_voidReadData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c0:	6b a1       	ldd	r22, Y+35	; 0x23
    13c2:	7c a1       	ldd	r23, Y+36	; 0x24
    13c4:	8d a1       	ldd	r24, Y+37	; 0x25
    13c6:	9e a1       	ldd	r25, Y+38	; 0x26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9a a3       	std	Y+34, r25	; 0x22
    13d2:	89 a3       	std	Y+33, r24	; 0x21
    13d4:	89 a1       	ldd	r24, Y+33	; 0x21
    13d6:	9a a1       	ldd	r25, Y+34	; 0x22
    13d8:	9e 8f       	std	Y+30, r25	; 0x1e
    13da:	8d 8f       	std	Y+29, r24	; 0x1d
    13dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <HAL_LCD_voidReadData+0x112>
    13e4:	9e 8f       	std	Y+30, r25	; 0x1e
    13e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);

    MCAL_DIO_voidGetPortValue(LCD_DATA_PORT,Copy_u8value);
    13e8:	2b a5       	ldd	r18, Y+43	; 0x2b
    13ea:	3c a5       	ldd	r19, Y+44	; 0x2c
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 9b 07 	call	0xf36	; 0xf36 <MCAL_DIO_voidGetPortValue>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a0 ea       	ldi	r26, 0xA0	; 160
    13fa:	b1 e4       	ldi	r27, 0x41	; 65
    13fc:	89 8f       	std	Y+25, r24	; 0x19
    13fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1400:	ab 8f       	std	Y+27, r26	; 0x1b
    1402:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1404:	69 8d       	ldd	r22, Y+25	; 0x19
    1406:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	4a e7       	ldi	r20, 0x7A	; 122
    1412:	55 e4       	ldi	r21, 0x45	; 69
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8d 8b       	std	Y+21, r24	; 0x15
    141e:	9e 8b       	std	Y+22, r25	; 0x16
    1420:	af 8b       	std	Y+23, r26	; 0x17
    1422:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1424:	6d 89       	ldd	r22, Y+21	; 0x15
    1426:	7e 89       	ldd	r23, Y+22	; 0x16
    1428:	8f 89       	ldd	r24, Y+23	; 0x17
    142a:	98 8d       	ldd	r25, Y+24	; 0x18
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1438:	88 23       	and	r24, r24
    143a:	2c f4       	brge	.+10     	; 0x1446 <HAL_LCD_voidReadData+0x178>
		__ticks = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9c 8b       	std	Y+20, r25	; 0x14
    1442:	8b 8b       	std	Y+19, r24	; 0x13
    1444:	3f c0       	rjmp	.+126    	; 0x14c4 <HAL_LCD_voidReadData+0x1f6>
	else if (__tmp > 65535)
    1446:	6d 89       	ldd	r22, Y+21	; 0x15
    1448:	7e 89       	ldd	r23, Y+22	; 0x16
    144a:	8f 89       	ldd	r24, Y+23	; 0x17
    144c:	98 8d       	ldd	r25, Y+24	; 0x18
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	4f e7       	ldi	r20, 0x7F	; 127
    1454:	57 e4       	ldi	r21, 0x47	; 71
    1456:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145a:	18 16       	cp	r1, r24
    145c:	4c f5       	brge	.+82     	; 0x14b0 <HAL_LCD_voidReadData+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	69 8d       	ldd	r22, Y+25	; 0x19
    1460:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1462:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1464:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9c 8b       	std	Y+20, r25	; 0x14
    1484:	8b 8b       	std	Y+19, r24	; 0x13
    1486:	0f c0       	rjmp	.+30     	; 0x14a6 <HAL_LCD_voidReadData+0x1d8>
    1488:	80 e9       	ldi	r24, 0x90	; 144
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	9a 8b       	std	Y+18, r25	; 0x12
    148e:	89 8b       	std	Y+17, r24	; 0x11
    1490:	89 89       	ldd	r24, Y+17	; 0x11
    1492:	9a 89       	ldd	r25, Y+18	; 0x12
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <HAL_LCD_voidReadData+0x1c6>
    1498:	9a 8b       	std	Y+18, r25	; 0x12
    149a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	9c 89       	ldd	r25, Y+20	; 0x14
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	9c 8b       	std	Y+20, r25	; 0x14
    14a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a6:	8b 89       	ldd	r24, Y+19	; 0x13
    14a8:	9c 89       	ldd	r25, Y+20	; 0x14
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	69 f7       	brne	.-38     	; 0x1488 <HAL_LCD_voidReadData+0x1ba>
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <HAL_LCD_voidReadData+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b0:	6d 89       	ldd	r22, Y+21	; 0x15
    14b2:	7e 89       	ldd	r23, Y+22	; 0x16
    14b4:	8f 89       	ldd	r24, Y+23	; 0x17
    14b6:	98 8d       	ldd	r25, Y+24	; 0x18
    14b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	9c 8b       	std	Y+20, r25	; 0x14
    14c2:	8b 8b       	std	Y+19, r24	; 0x13
    14c4:	8b 89       	ldd	r24, Y+19	; 0x13
    14c6:	9c 89       	ldd	r25, Y+20	; 0x14
    14c8:	98 8b       	std	Y+16, r25	; 0x10
    14ca:	8f 87       	std	Y+15, r24	; 0x0f
    14cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ce:	98 89       	ldd	r25, Y+16	; 0x10
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <HAL_LCD_voidReadData+0x202>
    14d4:	98 8b       	std	Y+16, r25	; 0x10
    14d6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(20);
	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_HIGH); /*Enable is high */
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	63 e0       	ldi	r22, 0x03	; 3
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a0 ea       	ldi	r26, 0xA0	; 160
    14e8:	b1 e4       	ldi	r27, 0x41	; 65
    14ea:	8b 87       	std	Y+11, r24	; 0x0b
    14ec:	9c 87       	std	Y+12, r25	; 0x0c
    14ee:	ad 87       	std	Y+13, r26	; 0x0d
    14f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a e7       	ldi	r20, 0x7A	; 122
    1500:	55 e4       	ldi	r21, 0x45	; 69
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8f 83       	std	Y+7, r24	; 0x07
    150c:	98 87       	std	Y+8, r25	; 0x08
    150e:	a9 87       	std	Y+9, r26	; 0x09
    1510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1512:	6f 81       	ldd	r22, Y+7	; 0x07
    1514:	78 85       	ldd	r23, Y+8	; 0x08
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	2c f4       	brge	.+10     	; 0x1534 <HAL_LCD_voidReadData+0x266>
		__ticks = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	3f c0       	rjmp	.+126    	; 0x15b2 <HAL_LCD_voidReadData+0x2e4>
	else if (__tmp > 65535)
    1534:	6f 81       	ldd	r22, Y+7	; 0x07
    1536:	78 85       	ldd	r23, Y+8	; 0x08
    1538:	89 85       	ldd	r24, Y+9	; 0x09
    153a:	9a 85       	ldd	r25, Y+10	; 0x0a
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	4c f5       	brge	.+82     	; 0x159e <HAL_LCD_voidReadData+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	6b 85       	ldd	r22, Y+11	; 0x0b
    154e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <HAL_LCD_voidReadData+0x2c6>
    1576:	80 e9       	ldi	r24, 0x90	; 144
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	9c 83       	std	Y+4, r25	; 0x04
    157c:	8b 83       	std	Y+3, r24	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <HAL_LCD_voidReadData+0x2b4>
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f7       	brne	.-38     	; 0x1576 <HAL_LCD_voidReadData+0x2a8>
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <HAL_LCD_voidReadData+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159e:	6f 81       	ldd	r22, Y+7	; 0x07
    15a0:	78 85       	ldd	r23, Y+8	; 0x08
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <HAL_LCD_voidReadData+0x2f0>
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	63 e0       	ldi	r22, 0x03	; 3
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

}
    15d0:	ac 96       	adiw	r28, 0x2c	; 44
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <HAL_LCD_voidWriteCommand>:
void HAL_LCD_voidWriteCommand(uint8_t Copy_u8Command)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	e9 97       	sbiw	r28, 0x39	; 57
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	89 af       	std	Y+57, r24	; 0x39
#elif(LCD_BIT_MODE == MODE_4_BIT)

		//MCAL_DIO_voidSetPinDirection(2,0,1);
		//MCAL_DIO_voidSetPinValue(2 , 0 , 1);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	63 e0       	ldi	r22, 0x03	; 3
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RS_PIN , DIO_LOW); /*0 write Command */
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RW_PIN , DIO_LOW); /*0 write */
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	62 e0       	ldi	r22, 0x02	; 2
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	LCD_DATA_PORT_REG = (Copy_u8Command & 0xF0) | (LCD_DATA_PORT_REG & 0x0F) ;
    1616:	a5 e3       	ldi	r26, 0x35	; 53
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	89 ad       	ldd	r24, Y+57	; 0x39
    161c:	98 2f       	mov	r25, r24
    161e:	90 7f       	andi	r25, 0xF0	; 240
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8f 70       	andi	r24, 0x0F	; 15
    1628:	89 2b       	or	r24, r25
    162a:	8c 93       	st	X, r24

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_HIGH); /*Enable is high */
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	63 e0       	ldi	r22, 0x03	; 3
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	b0 e4       	ldi	r27, 0x40	; 64
    163e:	8d ab       	std	Y+53, r24	; 0x35
    1640:	9e ab       	std	Y+54, r25	; 0x36
    1642:	af ab       	std	Y+55, r26	; 0x37
    1644:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1646:	6d a9       	ldd	r22, Y+53	; 0x35
    1648:	7e a9       	ldd	r23, Y+54	; 0x36
    164a:	8f a9       	ldd	r24, Y+55	; 0x37
    164c:	98 ad       	ldd	r25, Y+56	; 0x38
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	55 e4       	ldi	r21, 0x45	; 69
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	89 ab       	std	Y+49, r24	; 0x31
    1660:	9a ab       	std	Y+50, r25	; 0x32
    1662:	ab ab       	std	Y+51, r26	; 0x33
    1664:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1666:	69 a9       	ldd	r22, Y+49	; 0x31
    1668:	7a a9       	ldd	r23, Y+50	; 0x32
    166a:	8b a9       	ldd	r24, Y+51	; 0x33
    166c:	9c a9       	ldd	r25, Y+52	; 0x34
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	2c f4       	brge	.+10     	; 0x1688 <HAL_LCD_voidWriteCommand+0xa6>
		__ticks = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	98 ab       	std	Y+48, r25	; 0x30
    1684:	8f a7       	std	Y+47, r24	; 0x2f
    1686:	3f c0       	rjmp	.+126    	; 0x1706 <HAL_LCD_voidWriteCommand+0x124>
	else if (__tmp > 65535)
    1688:	69 a9       	ldd	r22, Y+49	; 0x31
    168a:	7a a9       	ldd	r23, Y+50	; 0x32
    168c:	8b a9       	ldd	r24, Y+51	; 0x33
    168e:	9c a9       	ldd	r25, Y+52	; 0x34
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	3f ef       	ldi	r19, 0xFF	; 255
    1694:	4f e7       	ldi	r20, 0x7F	; 127
    1696:	57 e4       	ldi	r21, 0x47	; 71
    1698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169c:	18 16       	cp	r1, r24
    169e:	4c f5       	brge	.+82     	; 0x16f2 <HAL_LCD_voidWriteCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a0:	6d a9       	ldd	r22, Y+53	; 0x35
    16a2:	7e a9       	ldd	r23, Y+54	; 0x36
    16a4:	8f a9       	ldd	r24, Y+55	; 0x37
    16a6:	98 ad       	ldd	r25, Y+56	; 0x38
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	98 ab       	std	Y+48, r25	; 0x30
    16c6:	8f a7       	std	Y+47, r24	; 0x2f
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <HAL_LCD_voidWriteCommand+0x106>
    16ca:	80 e9       	ldi	r24, 0x90	; 144
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	9e a7       	std	Y+46, r25	; 0x2e
    16d0:	8d a7       	std	Y+45, r24	; 0x2d
    16d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <HAL_LCD_voidWriteCommand+0xf4>
    16da:	9e a7       	std	Y+46, r25	; 0x2e
    16dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e0:	98 a9       	ldd	r25, Y+48	; 0x30
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	98 ab       	std	Y+48, r25	; 0x30
    16e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ea:	98 a9       	ldd	r25, Y+48	; 0x30
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	69 f7       	brne	.-38     	; 0x16ca <HAL_LCD_voidWriteCommand+0xe8>
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <HAL_LCD_voidWriteCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	69 a9       	ldd	r22, Y+49	; 0x31
    16f4:	7a a9       	ldd	r23, Y+50	; 0x32
    16f6:	8b a9       	ldd	r24, Y+51	; 0x33
    16f8:	9c a9       	ldd	r25, Y+52	; 0x34
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	98 ab       	std	Y+48, r25	; 0x30
    1704:	8f a7       	std	Y+47, r24	; 0x2f
    1706:	8f a5       	ldd	r24, Y+47	; 0x2f
    1708:	98 a9       	ldd	r25, Y+48	; 0x30
    170a:	9c a7       	std	Y+44, r25	; 0x2c
    170c:	8b a7       	std	Y+43, r24	; 0x2b
    170e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1710:	9c a5       	ldd	r25, Y+44	; 0x2c
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <HAL_LCD_voidWriteCommand+0x130>
    1716:	9c a7       	std	Y+44, r25	; 0x2c
    1718:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(2);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	63 e0       	ldi	r22, 0x03	; 3
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e4       	ldi	r27, 0x40	; 64
    172c:	8f a3       	std	Y+39, r24	; 0x27
    172e:	98 a7       	std	Y+40, r25	; 0x28
    1730:	a9 a7       	std	Y+41, r26	; 0x29
    1732:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	6f a1       	ldd	r22, Y+39	; 0x27
    1736:	78 a5       	ldd	r23, Y+40	; 0x28
    1738:	89 a5       	ldd	r24, Y+41	; 0x29
    173a:	9a a5       	ldd	r25, Y+42	; 0x2a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a e7       	ldi	r20, 0x7A	; 122
    1742:	55 e4       	ldi	r21, 0x45	; 69
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8b a3       	std	Y+35, r24	; 0x23
    174e:	9c a3       	std	Y+36, r25	; 0x24
    1750:	ad a3       	std	Y+37, r26	; 0x25
    1752:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1754:	6b a1       	ldd	r22, Y+35	; 0x23
    1756:	7c a1       	ldd	r23, Y+36	; 0x24
    1758:	8d a1       	ldd	r24, Y+37	; 0x25
    175a:	9e a1       	ldd	r25, Y+38	; 0x26
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <HAL_LCD_voidWriteCommand+0x194>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9a a3       	std	Y+34, r25	; 0x22
    1772:	89 a3       	std	Y+33, r24	; 0x21
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <HAL_LCD_voidWriteCommand+0x212>
	else if (__tmp > 65535)
    1776:	6b a1       	ldd	r22, Y+35	; 0x23
    1778:	7c a1       	ldd	r23, Y+36	; 0x24
    177a:	8d a1       	ldd	r24, Y+37	; 0x25
    177c:	9e a1       	ldd	r25, Y+38	; 0x26
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <HAL_LCD_voidWriteCommand+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	6f a1       	ldd	r22, Y+39	; 0x27
    1790:	78 a5       	ldd	r23, Y+40	; 0x28
    1792:	89 a5       	ldd	r24, Y+41	; 0x29
    1794:	9a a5       	ldd	r25, Y+42	; 0x2a
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9a a3       	std	Y+34, r25	; 0x22
    17b4:	89 a3       	std	Y+33, r24	; 0x21
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <HAL_LCD_voidWriteCommand+0x1f4>
    17b8:	80 e9       	ldi	r24, 0x90	; 144
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	98 a3       	std	Y+32, r25	; 0x20
    17be:	8f 8f       	std	Y+31, r24	; 0x1f
    17c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c2:	98 a1       	ldd	r25, Y+32	; 0x20
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <HAL_LCD_voidWriteCommand+0x1e2>
    17c8:	98 a3       	std	Y+32, r25	; 0x20
    17ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	89 a1       	ldd	r24, Y+33	; 0x21
    17ce:	9a a1       	ldd	r25, Y+34	; 0x22
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	9a a3       	std	Y+34, r25	; 0x22
    17d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <HAL_LCD_voidWriteCommand+0x1d6>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <HAL_LCD_voidWriteCommand+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	6b a1       	ldd	r22, Y+35	; 0x23
    17e2:	7c a1       	ldd	r23, Y+36	; 0x24
    17e4:	8d a1       	ldd	r24, Y+37	; 0x25
    17e6:	9e a1       	ldd	r25, Y+38	; 0x26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9a a3       	std	Y+34, r25	; 0x22
    17f2:	89 a3       	std	Y+33, r24	; 0x21
    17f4:	89 a1       	ldd	r24, Y+33	; 0x21
    17f6:	9a a1       	ldd	r25, Y+34	; 0x22
    17f8:	9e 8f       	std	Y+30, r25	; 0x1e
    17fa:	8d 8f       	std	Y+29, r24	; 0x1d
    17fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <HAL_LCD_voidWriteCommand+0x21e>
    1804:	9e 8f       	std	Y+30, r25	; 0x1e
    1806:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(2);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	63 e0       	ldi	r22, 0x03	; 3
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RS_PIN , DIO_LOW); /*0 write Command */
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RW_PIN , DIO_LOW); /*0 write */
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	LCD_DATA_PORT_REG = (Copy_u8Command << 4) | (LCD_DATA_PORT_REG & 0x0F) ;
    1826:	a5 e3       	ldi	r26, 0x35	; 53
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	89 ad       	ldd	r24, Y+57	; 0x39
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	82 95       	swap	r24
    1832:	92 95       	swap	r25
    1834:	90 7f       	andi	r25, 0xF0	; 240
    1836:	98 27       	eor	r25, r24
    1838:	80 7f       	andi	r24, 0xF0	; 240
    183a:	98 27       	eor	r25, r24
    183c:	98 2f       	mov	r25, r24
    183e:	e5 e3       	ldi	r30, 0x35	; 53
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8f 70       	andi	r24, 0x0F	; 15
    1846:	89 2b       	or	r24, r25
    1848:	8c 93       	st	X, r24

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_HIGH); /*Enable is high */
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	63 e0       	ldi	r22, 0x03	; 3
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e4       	ldi	r27, 0x40	; 64
    185c:	89 8f       	std	Y+25, r24	; 0x19
    185e:	9a 8f       	std	Y+26, r25	; 0x1a
    1860:	ab 8f       	std	Y+27, r26	; 0x1b
    1862:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1864:	69 8d       	ldd	r22, Y+25	; 0x19
    1866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a e7       	ldi	r20, 0x7A	; 122
    1872:	55 e4       	ldi	r21, 0x45	; 69
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8d 8b       	std	Y+21, r24	; 0x15
    187e:	9e 8b       	std	Y+22, r25	; 0x16
    1880:	af 8b       	std	Y+23, r26	; 0x17
    1882:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1884:	6d 89       	ldd	r22, Y+21	; 0x15
    1886:	7e 89       	ldd	r23, Y+22	; 0x16
    1888:	8f 89       	ldd	r24, Y+23	; 0x17
    188a:	98 8d       	ldd	r25, Y+24	; 0x18
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	2c f4       	brge	.+10     	; 0x18a6 <HAL_LCD_voidWriteCommand+0x2c4>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9c 8b       	std	Y+20, r25	; 0x14
    18a2:	8b 8b       	std	Y+19, r24	; 0x13
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <HAL_LCD_voidWriteCommand+0x342>
	else if (__tmp > 65535)
    18a6:	6d 89       	ldd	r22, Y+21	; 0x15
    18a8:	7e 89       	ldd	r23, Y+22	; 0x16
    18aa:	8f 89       	ldd	r24, Y+23	; 0x17
    18ac:	98 8d       	ldd	r25, Y+24	; 0x18
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	4c f5       	brge	.+82     	; 0x1910 <HAL_LCD_voidWriteCommand+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	69 8d       	ldd	r22, Y+25	; 0x19
    18c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <HAL_LCD_voidWriteCommand+0x324>
    18e8:	80 e9       	ldi	r24, 0x90	; 144
    18ea:	91 e0       	ldi	r25, 0x01	; 1
    18ec:	9a 8b       	std	Y+18, r25	; 0x12
    18ee:	89 8b       	std	Y+17, r24	; 0x11
    18f0:	89 89       	ldd	r24, Y+17	; 0x11
    18f2:	9a 89       	ldd	r25, Y+18	; 0x12
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <HAL_LCD_voidWriteCommand+0x312>
    18f8:	9a 8b       	std	Y+18, r25	; 0x12
    18fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	8b 89       	ldd	r24, Y+19	; 0x13
    18fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9c 8b       	std	Y+20, r25	; 0x14
    1904:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	8b 89       	ldd	r24, Y+19	; 0x13
    1908:	9c 89       	ldd	r25, Y+20	; 0x14
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f7       	brne	.-38     	; 0x18e8 <HAL_LCD_voidWriteCommand+0x306>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <HAL_LCD_voidWriteCommand+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1910:	6d 89       	ldd	r22, Y+21	; 0x15
    1912:	7e 89       	ldd	r23, Y+22	; 0x16
    1914:	8f 89       	ldd	r24, Y+23	; 0x17
    1916:	98 8d       	ldd	r25, Y+24	; 0x18
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9c 8b       	std	Y+20, r25	; 0x14
    1922:	8b 8b       	std	Y+19, r24	; 0x13
    1924:	8b 89       	ldd	r24, Y+19	; 0x13
    1926:	9c 89       	ldd	r25, Y+20	; 0x14
    1928:	98 8b       	std	Y+16, r25	; 0x10
    192a:	8f 87       	std	Y+15, r24	; 0x0f
    192c:	8f 85       	ldd	r24, Y+15	; 0x0f
    192e:	98 89       	ldd	r25, Y+16	; 0x10
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <HAL_LCD_voidWriteCommand+0x34e>
    1934:	98 8b       	std	Y+16, r25	; 0x10
    1936:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 e0       	ldi	r26, 0x00	; 0
    1948:	b0 e4       	ldi	r27, 0x40	; 64
    194a:	8b 87       	std	Y+11, r24	; 0x0b
    194c:	9c 87       	std	Y+12, r25	; 0x0c
    194e:	ad 87       	std	Y+13, r26	; 0x0d
    1950:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6b 85       	ldd	r22, Y+11	; 0x0b
    1954:	7c 85       	ldd	r23, Y+12	; 0x0c
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	55 e4       	ldi	r21, 0x45	; 69
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8f 83       	std	Y+7, r24	; 0x07
    196c:	98 87       	std	Y+8, r25	; 0x08
    196e:	a9 87       	std	Y+9, r26	; 0x09
    1970:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <HAL_LCD_voidWriteCommand+0x3b2>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <HAL_LCD_voidWriteCommand+0x430>
	else if (__tmp > 65535)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <HAL_LCD_voidWriteCommand+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <HAL_LCD_voidWriteCommand+0x412>
    19d6:	80 e9       	ldi	r24, 0x90	; 144
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <HAL_LCD_voidWriteCommand+0x400>
    19e6:	9c 83       	std	Y+4, r25	; 0x04
    19e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <HAL_LCD_voidWriteCommand+0x3f4>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <HAL_LCD_voidWriteCommand+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <HAL_LCD_voidWriteCommand+0x43c>
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

#endif

}
    1a26:	e9 96       	adiw	r28, 0x39	; 57
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <HAL_LCD_voidWriteData>:

void HAL_LCD_voidWriteData(uint8_t Copy_u8Data)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	e9 97       	sbiw	r28, 0x39	; 57
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	89 af       	std	Y+57, r24	; 0x39

#elif(LCD_BIT_MODE == MODE_4_BIT)

	//MCAL_DIO_voidSetPinDirection(2,0,1);
	//MCAL_DIO_voidSetPinValue(2 , 0 , 1);
	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	63 e0       	ldi	r22, 0x03	; 3
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RS_PIN , DIO_HIGH); /*0 write Command */
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RW_PIN , DIO_LOW); /*0 write */
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	LCD_DATA_PORT_REG = (Copy_u8Data & 0xF0) | (LCD_DATA_PORT_REG & 0x0F) ;
    1a6c:	a5 e3       	ldi	r26, 0x35	; 53
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	89 ad       	ldd	r24, Y+57	; 0x39
    1a72:	98 2f       	mov	r25, r24
    1a74:	90 7f       	andi	r25, 0xF0	; 240
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 70       	andi	r24, 0x0F	; 15
    1a7e:	89 2b       	or	r24, r25
    1a80:	8c 93       	st	X, r24

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_HIGH); /*Enable is high */
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	63 e0       	ldi	r22, 0x03	; 3
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e4       	ldi	r27, 0x40	; 64
    1a94:	8d ab       	std	Y+53, r24	; 0x35
    1a96:	9e ab       	std	Y+54, r25	; 0x36
    1a98:	af ab       	std	Y+55, r26	; 0x37
    1a9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a e7       	ldi	r20, 0x7A	; 122
    1aaa:	55 e4       	ldi	r21, 0x45	; 69
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	89 ab       	std	Y+49, r24	; 0x31
    1ab6:	9a ab       	std	Y+50, r25	; 0x32
    1ab8:	ab ab       	std	Y+51, r26	; 0x33
    1aba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1abc:	69 a9       	ldd	r22, Y+49	; 0x31
    1abe:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <HAL_LCD_voidWriteData+0xa6>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	98 ab       	std	Y+48, r25	; 0x30
    1ada:	8f a7       	std	Y+47, r24	; 0x2f
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <HAL_LCD_voidWriteData+0x124>
	else if (__tmp > 65535)
    1ade:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <HAL_LCD_voidWriteData+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	6d a9       	ldd	r22, Y+53	; 0x35
    1af8:	7e a9       	ldd	r23, Y+54	; 0x36
    1afa:	8f a9       	ldd	r24, Y+55	; 0x37
    1afc:	98 ad       	ldd	r25, Y+56	; 0x38
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	98 ab       	std	Y+48, r25	; 0x30
    1b1c:	8f a7       	std	Y+47, r24	; 0x2f
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <HAL_LCD_voidWriteData+0x106>
    1b20:	80 e9       	ldi	r24, 0x90	; 144
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	9e a7       	std	Y+46, r25	; 0x2e
    1b26:	8d a7       	std	Y+45, r24	; 0x2d
    1b28:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <HAL_LCD_voidWriteData+0xf4>
    1b30:	9e a7       	std	Y+46, r25	; 0x2e
    1b32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b36:	98 a9       	ldd	r25, Y+48	; 0x30
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	98 ab       	std	Y+48, r25	; 0x30
    1b3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b40:	98 a9       	ldd	r25, Y+48	; 0x30
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <HAL_LCD_voidWriteData+0xe8>
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <HAL_LCD_voidWriteData+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	69 a9       	ldd	r22, Y+49	; 0x31
    1b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	98 ab       	std	Y+48, r25	; 0x30
    1b5a:	8f a7       	std	Y+47, r24	; 0x2f
    1b5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b60:	9c a7       	std	Y+44, r25	; 0x2c
    1b62:	8b a7       	std	Y+43, r24	; 0x2b
    1b64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b66:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <HAL_LCD_voidWriteData+0x130>
    1b6c:	9c a7       	std	Y+44, r25	; 0x2c
    1b6e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(2);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	63 e0       	ldi	r22, 0x03	; 3
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e4       	ldi	r27, 0x40	; 64
    1b82:	8f a3       	std	Y+39, r24	; 0x27
    1b84:	98 a7       	std	Y+40, r25	; 0x28
    1b86:	a9 a7       	std	Y+41, r26	; 0x29
    1b88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a e7       	ldi	r20, 0x7A	; 122
    1b98:	55 e4       	ldi	r21, 0x45	; 69
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	8b a3       	std	Y+35, r24	; 0x23
    1ba4:	9c a3       	std	Y+36, r25	; 0x24
    1ba6:	ad a3       	std	Y+37, r26	; 0x25
    1ba8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1baa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bac:	7c a1       	ldd	r23, Y+36	; 0x24
    1bae:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bbe:	88 23       	and	r24, r24
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <HAL_LCD_voidWriteData+0x194>
		__ticks = 1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9a a3       	std	Y+34, r25	; 0x22
    1bc8:	89 a3       	std	Y+33, r24	; 0x21
    1bca:	3f c0       	rjmp	.+126    	; 0x1c4a <HAL_LCD_voidWriteData+0x212>
	else if (__tmp > 65535)
    1bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bce:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	4c f5       	brge	.+82     	; 0x1c36 <HAL_LCD_voidWriteData+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	6f a1       	ldd	r22, Y+39	; 0x27
    1be6:	78 a5       	ldd	r23, Y+40	; 0x28
    1be8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	51 e4       	ldi	r21, 0x41	; 65
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9a a3       	std	Y+34, r25	; 0x22
    1c0a:	89 a3       	std	Y+33, r24	; 0x21
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <HAL_LCD_voidWriteData+0x1f4>
    1c0e:	80 e9       	ldi	r24, 0x90	; 144
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	98 a3       	std	Y+32, r25	; 0x20
    1c14:	8f 8f       	std	Y+31, r24	; 0x1f
    1c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c18:	98 a1       	ldd	r25, Y+32	; 0x20
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <HAL_LCD_voidWriteData+0x1e2>
    1c1e:	98 a3       	std	Y+32, r25	; 0x20
    1c20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c22:	89 a1       	ldd	r24, Y+33	; 0x21
    1c24:	9a a1       	ldd	r25, Y+34	; 0x22
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	9a a3       	std	Y+34, r25	; 0x22
    1c2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	69 f7       	brne	.-38     	; 0x1c0e <HAL_LCD_voidWriteData+0x1d6>
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <HAL_LCD_voidWriteData+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c36:	6b a1       	ldd	r22, Y+35	; 0x23
    1c38:	7c a1       	ldd	r23, Y+36	; 0x24
    1c3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9a a3       	std	Y+34, r25	; 0x22
    1c48:	89 a3       	std	Y+33, r24	; 0x21
    1c4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c50:	8d 8f       	std	Y+29, r24	; 0x1d
    1c52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <HAL_LCD_voidWriteData+0x21e>
    1c5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(2);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	63 e0       	ldi	r22, 0x03	; 3
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RS_PIN , DIO_HIGH); /*0 write Command */
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	MCAL_DIO_voidSetPinValue(LCD_RW_PIN , DIO_LOW); /*0 write */
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	62 e0       	ldi	r22, 0x02	; 2
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

	LCD_DATA_PORT_REG = (Copy_u8Data << 4) | (LCD_DATA_PORT_REG & 0x0F) ;
    1c7c:	a5 e3       	ldi	r26, 0x35	; 53
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	89 ad       	ldd	r24, Y+57	; 0x39
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	82 95       	swap	r24
    1c88:	92 95       	swap	r25
    1c8a:	90 7f       	andi	r25, 0xF0	; 240
    1c8c:	98 27       	eor	r25, r24
    1c8e:	80 7f       	andi	r24, 0xF0	; 240
    1c90:	98 27       	eor	r25, r24
    1c92:	98 2f       	mov	r25, r24
    1c94:	e5 e3       	ldi	r30, 0x35	; 53
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	8f 70       	andi	r24, 0x0F	; 15
    1c9c:	89 2b       	or	r24, r25
    1c9e:	8c 93       	st	X, r24

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_HIGH); /*Enable is high */
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e0       	ldi	r26, 0x00	; 0
    1cb0:	b0 e4       	ldi	r27, 0x40	; 64
    1cb2:	89 8f       	std	Y+25, r24	; 0x19
    1cb4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cb6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	55 e4       	ldi	r21, 0x45	; 69
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8d 8b       	std	Y+21, r24	; 0x15
    1cd4:	9e 8b       	std	Y+22, r25	; 0x16
    1cd6:	af 8b       	std	Y+23, r26	; 0x17
    1cd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cda:	6d 89       	ldd	r22, Y+21	; 0x15
    1cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cde:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <HAL_LCD_voidWriteData+0x2c4>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <HAL_LCD_voidWriteData+0x342>
	else if (__tmp > 65535)
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <HAL_LCD_voidWriteData+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	69 8d       	ldd	r22, Y+25	; 0x19
    1d16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9c 8b       	std	Y+20, r25	; 0x14
    1d3a:	8b 8b       	std	Y+19, r24	; 0x13
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <HAL_LCD_voidWriteData+0x324>
    1d3e:	80 e9       	ldi	r24, 0x90	; 144
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	9a 8b       	std	Y+18, r25	; 0x12
    1d44:	89 8b       	std	Y+17, r24	; 0x11
    1d46:	89 89       	ldd	r24, Y+17	; 0x11
    1d48:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <HAL_LCD_voidWriteData+0x312>
    1d4e:	9a 8b       	std	Y+18, r25	; 0x12
    1d50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9c 8b       	std	Y+20, r25	; 0x14
    1d5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <HAL_LCD_voidWriteData+0x306>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <HAL_LCD_voidWriteData+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6d 89       	ldd	r22, Y+21	; 0x15
    1d68:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9c 8b       	std	Y+20, r25	; 0x14
    1d78:	8b 8b       	std	Y+19, r24	; 0x13
    1d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7e:	98 8b       	std	Y+16, r25	; 0x10
    1d80:	8f 87       	std	Y+15, r24	; 0x0f
    1d82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d84:	98 89       	ldd	r25, Y+16	; 0x10
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <HAL_LCD_voidWriteData+0x34e>
    1d8a:	98 8b       	std	Y+16, r25	; 0x10
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	MCAL_DIO_voidSetPinValue(LCD_E_PIN , DIO_LOW); /*Enable is low */
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	63 e0       	ldi	r22, 0x03	; 3
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e4       	ldi	r27, 0x40	; 64
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
    1da2:	9c 87       	std	Y+12, r25	; 0x0c
    1da4:	ad 87       	std	Y+13, r26	; 0x0d
    1da6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	55 e4       	ldi	r21, 0x45	; 69
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8f 83       	std	Y+7, r24	; 0x07
    1dc2:	98 87       	std	Y+8, r25	; 0x08
    1dc4:	a9 87       	std	Y+9, r26	; 0x09
    1dc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <HAL_LCD_voidWriteData+0x3b2>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <HAL_LCD_voidWriteData+0x430>
	else if (__tmp > 65535)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <HAL_LCD_voidWriteData+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <HAL_LCD_voidWriteData+0x412>
    1e2c:	80 e9       	ldi	r24, 0x90	; 144
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	9c 83       	std	Y+4, r25	; 0x04
    1e32:	8b 83       	std	Y+3, r24	; 0x03
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <HAL_LCD_voidWriteData+0x400>
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <HAL_LCD_voidWriteData+0x3f4>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <HAL_LCD_voidWriteData+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <HAL_LCD_voidWriteData+0x43c>
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
#endif

}
    1e7c:	e9 96       	adiw	r28, 0x39	; 57
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <HAL_LCD_Init>:


void HAL_LCD_Init(void)
{
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	c4 55       	subi	r28, 0x54	; 84
    1e9c:	d0 40       	sbci	r29, 0x00	; 0
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
	HAL_LCD_voidWriteCommand(0b00000001);

	_delay_ms(2);
#elif(LCD_BIT_MODE == MODE_4_BIT)

	MCAL_DIO_voidSetPinDirection(LCD_E_PIN , DIO_OUTPUT);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	63 e0       	ldi	r22, 0x03	; 3
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <MCAL_DIO_voidSetPinDirection>
	MCAL_DIO_voidSetPinDirection(LCD_RS_PIN , DIO_OUTPUT);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <MCAL_DIO_voidSetPinDirection>
	MCAL_DIO_voidSetPinDirection(LCD_RW_PIN , DIO_OUTPUT);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <MCAL_DIO_voidSetPinDirection>

	LCD_DATA_DIR_REG = (LCD_DATA_DIR_REG & 0x0F) | 0xF0 ;
    1ec6:	a4 e3       	ldi	r26, 0x34	; 52
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e4 e3       	ldi	r30, 0x34	; 52
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	80 6f       	ori	r24, 0xF0	; 240
    1ed2:	8c 93       	st	X, r24
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ef 5a       	subi	r30, 0xAF	; 175
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a0 ef       	ldi	r26, 0xF0	; 240
    1ee0:	b1 e4       	ldi	r27, 0x41	; 65
    1ee2:	80 83       	st	Z, r24
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	a2 83       	std	Z+2, r26	; 0x02
    1ee8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	8e 01       	movw	r16, r28
    1eec:	03 5b       	subi	r16, 0xB3	; 179
    1eee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	ef 5a       	subi	r30, 0xAF	; 175
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a e7       	ldi	r20, 0x7A	; 122
    1f04:	55 e4       	ldi	r21, 0x45	; 69
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 83       	st	Z, r24
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	a2 83       	std	Z+2, r26	; 0x02
    1f16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e3 5b       	subi	r30, 0xB3	; 179
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	44 f4       	brge	.+16     	; 0x1f46 <HAL_LCD_Init+0xb8>
		__ticks = 1;
    1f36:	fe 01       	movw	r30, r28
    1f38:	e5 5b       	subi	r30, 0xB5	; 181
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
    1f44:	64 c0       	rjmp	.+200    	; 0x200e <HAL_LCD_Init+0x180>
	else if (__tmp > 65535)
    1f46:	fe 01       	movw	r30, r28
    1f48:	e3 5b       	subi	r30, 0xB3	; 179
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	0c f0       	brlt	.+2      	; 0x1f66 <HAL_LCD_Init+0xd8>
    1f64:	43 c0       	rjmp	.+134    	; 0x1fec <HAL_LCD_Init+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	fe 01       	movw	r30, r28
    1f68:	ef 5a       	subi	r30, 0xAF	; 175
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8e 01       	movw	r16, r28
    1f86:	05 5b       	subi	r16, 0xB5	; 181
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	f8 01       	movw	r30, r16
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	80 83       	st	Z, r24
    1f9c:	1f c0       	rjmp	.+62     	; 0x1fdc <HAL_LCD_Init+0x14e>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e7 5b       	subi	r30, 0xB7	; 183
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 e9       	ldi	r24, 0x90	; 144
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
    1fac:	fe 01       	movw	r30, r28
    1fae:	e7 5b       	subi	r30, 0xB7	; 183
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <HAL_LCD_Init+0x128>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e7 5b       	subi	r30, 0xB7	; 183
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	de 01       	movw	r26, r28
    1fc6:	a5 5b       	subi	r26, 0xB5	; 181
    1fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e5 5b       	subi	r30, 0xB5	; 181
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	9c 93       	st	X, r25
    1fda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e5 5b       	subi	r30, 0xB5	; 181
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	d1 f6       	brne	.-76     	; 0x1f9e <HAL_LCD_Init+0x110>
    1fea:	27 c0       	rjmp	.+78     	; 0x203a <HAL_LCD_Init+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	8e 01       	movw	r16, r28
    1fee:	05 5b       	subi	r16, 0xB5	; 181
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e3 5b       	subi	r30, 0xB3	; 179
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	f8 01       	movw	r30, r16
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
    200e:	de 01       	movw	r26, r28
    2010:	a9 5b       	subi	r26, 0xB9	; 185
    2012:	bf 4f       	sbci	r27, 0xFF	; 255
    2014:	fe 01       	movw	r30, r28
    2016:	e5 5b       	subi	r30, 0xB5	; 181
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	8d 93       	st	X+, r24
    2020:	9c 93       	st	X, r25
    2022:	fe 01       	movw	r30, r28
    2024:	e9 5b       	subi	r30, 0xB9	; 185
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <HAL_LCD_Init+0x19e>
    2030:	fe 01       	movw	r30, r28
    2032:	e9 5b       	subi	r30, 0xB9	; 185
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24

	_delay_ms(30);

	HAL_LCD_voidWriteCommand(0x33); //0b00(1100)00
    203a:	83 e3       	ldi	r24, 0x33	; 51
    203c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
    2040:	fe 01       	movw	r30, r28
    2042:	ed 5b       	subi	r30, 0xBD	; 189
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e0       	ldi	r26, 0x00	; 0
    204c:	b0 e4       	ldi	r27, 0x40	; 64
    204e:	80 83       	st	Z, r24
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	a2 83       	std	Z+2, r26	; 0x02
    2054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	8e 01       	movw	r16, r28
    2058:	01 5c       	subi	r16, 0xC1	; 193
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	ed 5b       	subi	r30, 0xBD	; 189
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a e7       	ldi	r20, 0x7A	; 122
    2070:	55 e4       	ldi	r21, 0x45	; 69
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	f8 01       	movw	r30, r16
    207c:	80 83       	st	Z, r24
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	a2 83       	std	Z+2, r26	; 0x02
    2082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2084:	fe 01       	movw	r30, r28
    2086:	ff 96       	adiw	r30, 0x3f	; 63
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <HAL_LCD_Init+0x21c>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e af       	std	Y+62, r25	; 0x3e
    20a6:	8d af       	std	Y+61, r24	; 0x3d
    20a8:	46 c0       	rjmp	.+140    	; 0x2136 <HAL_LCD_Init+0x2a8>
	else if (__tmp > 65535)
    20aa:	fe 01       	movw	r30, r28
    20ac:	ff 96       	adiw	r30, 0x3f	; 63
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	64 f5       	brge	.+88     	; 0x211e <HAL_LCD_Init+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	fe 01       	movw	r30, r28
    20c8:	ed 5b       	subi	r30, 0xBD	; 189
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e2       	ldi	r20, 0x20	; 32
    20da:	51 e4       	ldi	r21, 0x41	; 65
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e af       	std	Y+62, r25	; 0x3e
    20f2:	8d af       	std	Y+61, r24	; 0x3d
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <HAL_LCD_Init+0x286>
    20f6:	80 e9       	ldi	r24, 0x90	; 144
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	9c af       	std	Y+60, r25	; 0x3c
    20fc:	8b af       	std	Y+59, r24	; 0x3b
    20fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2100:	9c ad       	ldd	r25, Y+60	; 0x3c
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <HAL_LCD_Init+0x274>
    2106:	9c af       	std	Y+60, r25	; 0x3c
    2108:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210a:	8d ad       	ldd	r24, Y+61	; 0x3d
    210c:	9e ad       	ldd	r25, Y+62	; 0x3e
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9e af       	std	Y+62, r25	; 0x3e
    2112:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	8d ad       	ldd	r24, Y+61	; 0x3d
    2116:	9e ad       	ldd	r25, Y+62	; 0x3e
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f7       	brne	.-38     	; 0x20f6 <HAL_LCD_Init+0x268>
    211c:	16 c0       	rjmp	.+44     	; 0x214a <HAL_LCD_Init+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	fe 01       	movw	r30, r28
    2120:	ff 96       	adiw	r30, 0x3f	; 63
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e af       	std	Y+62, r25	; 0x3e
    2134:	8d af       	std	Y+61, r24	; 0x3d
    2136:	8d ad       	ldd	r24, Y+61	; 0x3d
    2138:	9e ad       	ldd	r25, Y+62	; 0x3e
    213a:	9a af       	std	Y+58, r25	; 0x3a
    213c:	89 af       	std	Y+57, r24	; 0x39
    213e:	89 ad       	ldd	r24, Y+57	; 0x39
    2140:	9a ad       	ldd	r25, Y+58	; 0x3a
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <HAL_LCD_Init+0x2b4>
    2146:	9a af       	std	Y+58, r25	; 0x3a
    2148:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(2);

	HAL_LCD_voidWriteCommand(0x32);
    214a:	82 e3       	ldi	r24, 0x32	; 50
    214c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e0       	ldi	r26, 0x00	; 0
    2156:	b0 e4       	ldi	r27, 0x40	; 64
    2158:	8d ab       	std	Y+53, r24	; 0x35
    215a:	9e ab       	std	Y+54, r25	; 0x36
    215c:	af ab       	std	Y+55, r26	; 0x37
    215e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6d a9       	ldd	r22, Y+53	; 0x35
    2162:	7e a9       	ldd	r23, Y+54	; 0x36
    2164:	8f a9       	ldd	r24, Y+55	; 0x37
    2166:	98 ad       	ldd	r25, Y+56	; 0x38
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a e7       	ldi	r20, 0x7A	; 122
    216e:	55 e4       	ldi	r21, 0x45	; 69
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	89 ab       	std	Y+49, r24	; 0x31
    217a:	9a ab       	std	Y+50, r25	; 0x32
    217c:	ab ab       	std	Y+51, r26	; 0x33
    217e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <HAL_LCD_Init+0x314>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	98 ab       	std	Y+48, r25	; 0x30
    219e:	8f a7       	std	Y+47, r24	; 0x2f
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <HAL_LCD_Init+0x392>
	else if (__tmp > 65535)
    21a2:	69 a9       	ldd	r22, Y+49	; 0x31
    21a4:	7a a9       	ldd	r23, Y+50	; 0x32
    21a6:	8b a9       	ldd	r24, Y+51	; 0x33
    21a8:	9c a9       	ldd	r25, Y+52	; 0x34
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <HAL_LCD_Init+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6d a9       	ldd	r22, Y+53	; 0x35
    21bc:	7e a9       	ldd	r23, Y+54	; 0x36
    21be:	8f a9       	ldd	r24, Y+55	; 0x37
    21c0:	98 ad       	ldd	r25, Y+56	; 0x38
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	98 ab       	std	Y+48, r25	; 0x30
    21e0:	8f a7       	std	Y+47, r24	; 0x2f
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <HAL_LCD_Init+0x374>
    21e4:	80 e9       	ldi	r24, 0x90	; 144
    21e6:	91 e0       	ldi	r25, 0x01	; 1
    21e8:	9e a7       	std	Y+46, r25	; 0x2e
    21ea:	8d a7       	std	Y+45, r24	; 0x2d
    21ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <HAL_LCD_Init+0x362>
    21f4:	9e a7       	std	Y+46, r25	; 0x2e
    21f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fa:	98 a9       	ldd	r25, Y+48	; 0x30
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	98 ab       	std	Y+48, r25	; 0x30
    2200:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8f a5       	ldd	r24, Y+47	; 0x2f
    2204:	98 a9       	ldd	r25, Y+48	; 0x30
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <HAL_LCD_Init+0x356>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <HAL_LCD_Init+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	69 a9       	ldd	r22, Y+49	; 0x31
    220e:	7a a9       	ldd	r23, Y+50	; 0x32
    2210:	8b a9       	ldd	r24, Y+51	; 0x33
    2212:	9c a9       	ldd	r25, Y+52	; 0x34
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
    2220:	8f a5       	ldd	r24, Y+47	; 0x2f
    2222:	98 a9       	ldd	r25, Y+48	; 0x30
    2224:	9c a7       	std	Y+44, r25	; 0x2c
    2226:	8b a7       	std	Y+43, r24	; 0x2b
    2228:	8b a5       	ldd	r24, Y+43	; 0x2b
    222a:	9c a5       	ldd	r25, Y+44	; 0x2c
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <HAL_LCD_Init+0x39e>
    2230:	9c a7       	std	Y+44, r25	; 0x2c
    2232:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(2);

	HAL_LCD_voidWriteCommand(0b00101100);
    2234:	8c e2       	ldi	r24, 0x2C	; 44
    2236:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a0 e0       	ldi	r26, 0x00	; 0
    2240:	b0 e4       	ldi	r27, 0x40	; 64
    2242:	8f a3       	std	Y+39, r24	; 0x27
    2244:	98 a7       	std	Y+40, r25	; 0x28
    2246:	a9 a7       	std	Y+41, r26	; 0x29
    2248:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6f a1       	ldd	r22, Y+39	; 0x27
    224c:	78 a5       	ldd	r23, Y+40	; 0x28
    224e:	89 a5       	ldd	r24, Y+41	; 0x29
    2250:	9a a5       	ldd	r25, Y+42	; 0x2a
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a e7       	ldi	r20, 0x7A	; 122
    2258:	55 e4       	ldi	r21, 0x45	; 69
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8b a3       	std	Y+35, r24	; 0x23
    2264:	9c a3       	std	Y+36, r25	; 0x24
    2266:	ad a3       	std	Y+37, r26	; 0x25
    2268:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    226a:	6b a1       	ldd	r22, Y+35	; 0x23
    226c:	7c a1       	ldd	r23, Y+36	; 0x24
    226e:	8d a1       	ldd	r24, Y+37	; 0x25
    2270:	9e a1       	ldd	r25, Y+38	; 0x26
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <HAL_LCD_Init+0x3fe>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9a a3       	std	Y+34, r25	; 0x22
    2288:	89 a3       	std	Y+33, r24	; 0x21
    228a:	3f c0       	rjmp	.+126    	; 0x230a <HAL_LCD_Init+0x47c>
	else if (__tmp > 65535)
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <HAL_LCD_Init+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6f a1       	ldd	r22, Y+39	; 0x27
    22a6:	78 a5       	ldd	r23, Y+40	; 0x28
    22a8:	89 a5       	ldd	r24, Y+41	; 0x29
    22aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9a a3       	std	Y+34, r25	; 0x22
    22ca:	89 a3       	std	Y+33, r24	; 0x21
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <HAL_LCD_Init+0x45e>
    22ce:	80 e9       	ldi	r24, 0x90	; 144
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	98 a3       	std	Y+32, r25	; 0x20
    22d4:	8f 8f       	std	Y+31, r24	; 0x1f
    22d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d8:	98 a1       	ldd	r25, Y+32	; 0x20
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <HAL_LCD_Init+0x44c>
    22de:	98 a3       	std	Y+32, r25	; 0x20
    22e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9a a3       	std	Y+34, r25	; 0x22
    22ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	89 a1       	ldd	r24, Y+33	; 0x21
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <HAL_LCD_Init+0x440>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <HAL_LCD_Init+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6b a1       	ldd	r22, Y+35	; 0x23
    22f8:	7c a1       	ldd	r23, Y+36	; 0x24
    22fa:	8d a1       	ldd	r24, Y+37	; 0x25
    22fc:	9e a1       	ldd	r25, Y+38	; 0x26
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	89 a1       	ldd	r24, Y+33	; 0x21
    230c:	9a a1       	ldd	r25, Y+34	; 0x22
    230e:	9e 8f       	std	Y+30, r25	; 0x1e
    2310:	8d 8f       	std	Y+29, r24	; 0x1d
    2312:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2314:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <HAL_LCD_Init+0x488>
    231a:	9e 8f       	std	Y+30, r25	; 0x1e
    231c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(2);

	HAL_LCD_voidWriteCommand(0b00001111);
    231e:	8f e0       	ldi	r24, 0x0F	; 15
    2320:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e0       	ldi	r26, 0x00	; 0
    232a:	b0 e4       	ldi	r27, 0x40	; 64
    232c:	89 8f       	std	Y+25, r24	; 0x19
    232e:	9a 8f       	std	Y+26, r25	; 0x1a
    2330:	ab 8f       	std	Y+27, r26	; 0x1b
    2332:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	69 8d       	ldd	r22, Y+25	; 0x19
    2336:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	55 e4       	ldi	r21, 0x45	; 69
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8d 8b       	std	Y+21, r24	; 0x15
    234e:	9e 8b       	std	Y+22, r25	; 0x16
    2350:	af 8b       	std	Y+23, r26	; 0x17
    2352:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <HAL_LCD_Init+0x4e8>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <HAL_LCD_Init+0x566>
	else if (__tmp > 65535)
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <HAL_LCD_Init+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	69 8d       	ldd	r22, Y+25	; 0x19
    2390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <HAL_LCD_Init+0x548>
    23b8:	80 e9       	ldi	r24, 0x90	; 144
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
    23c0:	89 89       	ldd	r24, Y+17	; 0x11
    23c2:	9a 89       	ldd	r25, Y+18	; 0x12
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <HAL_LCD_Init+0x536>
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <HAL_LCD_Init+0x52a>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <HAL_LCD_Init+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
    23fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fe:	98 89       	ldd	r25, Y+16	; 0x10
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <HAL_LCD_Init+0x572>
    2404:	98 8b       	std	Y+16, r25	; 0x10
    2406:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	HAL_LCD_voidWriteCommand(0b00000001);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	b0 e4       	ldi	r27, 0x40	; 64
    2416:	8b 87       	std	Y+11, r24	; 0x0b
    2418:	9c 87       	std	Y+12, r25	; 0x0c
    241a:	ad 87       	std	Y+13, r26	; 0x0d
    241c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2420:	7c 85       	ldd	r23, Y+12	; 0x0c
    2422:	8d 85       	ldd	r24, Y+13	; 0x0d
    2424:	9e 85       	ldd	r25, Y+14	; 0x0e
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a e7       	ldi	r20, 0x7A	; 122
    242c:	55 e4       	ldi	r21, 0x45	; 69
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8f 83       	std	Y+7, r24	; 0x07
    2438:	98 87       	std	Y+8, r25	; 0x08
    243a:	a9 87       	std	Y+9, r26	; 0x09
    243c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243e:	6f 81       	ldd	r22, Y+7	; 0x07
    2440:	78 85       	ldd	r23, Y+8	; 0x08
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <HAL_LCD_Init+0x5d2>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9e 83       	std	Y+6, r25	; 0x06
    245c:	8d 83       	std	Y+5, r24	; 0x05
    245e:	3f c0       	rjmp	.+126    	; 0x24de <HAL_LCD_Init+0x650>
	else if (__tmp > 65535)
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <HAL_LCD_Init+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	6b 85       	ldd	r22, Y+11	; 0x0b
    247a:	7c 85       	ldd	r23, Y+12	; 0x0c
    247c:	8d 85       	ldd	r24, Y+13	; 0x0d
    247e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <HAL_LCD_Init+0x632>
    24a2:	80 e9       	ldi	r24, 0x90	; 144
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	9c 83       	std	Y+4, r25	; 0x04
    24a8:	8b 83       	std	Y+3, r24	; 0x03
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	9c 81       	ldd	r25, Y+4	; 0x04
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <HAL_LCD_Init+0x620>
    24b2:	9c 83       	std	Y+4, r25	; 0x04
    24b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	8d 81       	ldd	r24, Y+5	; 0x05
    24b8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <HAL_LCD_Init+0x614>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <HAL_LCD_Init+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <HAL_LCD_Init+0x65c>
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    24f2:	cc 5a       	subi	r28, 0xAC	; 172
    24f4:	df 4f       	sbci	r29, 0xFF	; 255
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	08 95       	ret

0000250a <HAL_LCD_voidClr>:

void HAL_LCD_voidClr(uint8_t Copy_u8Rowc , uint8_t Copy_u8Colc,uint8_t Copy_u8BacktoRow , uint8_t Copy_u8BacktoCol){
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	00 d0       	rcall	.+0      	; 0x2510 <HAL_LCD_voidClr+0x6>
    2510:	00 d0       	rcall	.+0      	; 0x2512 <HAL_LCD_voidClr+0x8>
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	6a 83       	std	Y+2, r22	; 0x02
    251a:	4b 83       	std	Y+3, r20	; 0x03
    251c:	2c 83       	std	Y+4, r18	; 0x04
	HAL_LCD_voidMoveCursor(Copy_u8Rowc,Copy_u8Colc);
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	6a 81       	ldd	r22, Y+2	; 0x02
    2522:	0e 94 d7 12 	call	0x25ae	; 0x25ae <HAL_LCD_voidMoveCursor>
	HAL_LCD_voidWriteCharacter(7);
    2526:	87 e0       	ldi	r24, 0x07	; 7
    2528:	0e 94 a1 12 	call	0x2542	; 0x2542 <HAL_LCD_voidWriteCharacter>
	HAL_LCD_voidMoveCursor(Copy_u8BacktoRow ,Copy_u8BacktoCol);
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	6c 81       	ldd	r22, Y+4	; 0x04
    2530:	0e 94 d7 12 	call	0x25ae	; 0x25ae <HAL_LCD_voidMoveCursor>

}
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <HAL_LCD_voidWriteCharacter>:
void HAL_LCD_voidWriteCharacter(uint8_t Copy_u8Character)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	0f 92       	push	r0
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	89 83       	std	Y+1, r24	; 0x01
	HAL_LCD_voidWriteData(Copy_u8Character);
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <HAL_LCD_voidWriteData>
}
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <HAL_LCD_voidWriteString>:

void HAL_LCD_voidWriteString(uint8_t arr[])
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <HAL_LCD_voidWriteString+0x6>
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	9b 83       	std	Y+3, r25	; 0x03
    256a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Loop = 0 ;
    256c:	19 82       	std	Y+1, r1	; 0x01
    256e:	0e c0       	rjmp	.+28     	; 0x258c <HAL_LCD_voidWriteString+0x30>

	while(arr[Loop] != NULL_CHAR)
	{
		HAL_LCD_voidWriteData(arr[Loop]);
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	fc 01       	movw	r30, r24
    257c:	e2 0f       	add	r30, r18
    257e:	f3 1f       	adc	r31, r19
    2580:	80 81       	ld	r24, Z
    2582:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <HAL_LCD_voidWriteData>
		Loop++ ;
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	8f 5f       	subi	r24, 0xFF	; 255
    258a:	89 83       	std	Y+1, r24	; 0x01

void HAL_LCD_voidWriteString(uint8_t arr[])
{
	uint8_t Loop = 0 ;

	while(arr[Loop] != NULL_CHAR)
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	fc 01       	movw	r30, r24
    2598:	e2 0f       	add	r30, r18
    259a:	f3 1f       	adc	r31, r19
    259c:	80 81       	ld	r24, Z
    259e:	88 23       	and	r24, r24
    25a0:	39 f7       	brne	.-50     	; 0x2570 <HAL_LCD_voidWriteString+0x14>
	{
		HAL_LCD_voidWriteData(arr[Loop]);
		Loop++ ;
	}
}
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <HAL_LCD_voidMoveCursor>:

void HAL_LCD_voidMoveCursor(uint8_t Copy_u8Row , uint8_t Copy_u8Col)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <HAL_LCD_voidMoveCursor+0x6>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	6a 83       	std	Y+2, r22	; 0x02
	else if(Copy_u8Row == 1)
	{
		HAL_LCD_voidWriteCommand( 128 + 0x40 + Copy_u8Col); //128 = 0x80 = 0b10000000
	}*/

	HAL_LCD_voidWriteCommand( 128 + (0x40 * Copy_u8Row) + Copy_u8Col);
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	02 96       	adiw	r24, 0x02	; 2
    25c4:	00 24       	eor	r0, r0
    25c6:	96 95       	lsr	r25
    25c8:	87 95       	ror	r24
    25ca:	07 94       	ror	r0
    25cc:	96 95       	lsr	r25
    25ce:	87 95       	ror	r24
    25d0:	07 94       	ror	r0
    25d2:	98 2f       	mov	r25, r24
    25d4:	80 2d       	mov	r24, r0
    25d6:	98 2f       	mov	r25, r24
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	89 0f       	add	r24, r25
    25dc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
}
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <HAL_LCD_SpecialChar>:
void HAL_LCD_SpecialChar(uint8_t arr[] , uint8_t Copy_BlockNum ,  uint8_t Copy_Row , uint8_t Copy_Col)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <HAL_LCD_SpecialChar+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <HAL_LCD_SpecialChar+0x8>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <HAL_LCD_SpecialChar+0xa>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9b 83       	std	Y+3, r25	; 0x03
    25fa:	8a 83       	std	Y+2, r24	; 0x02
    25fc:	6c 83       	std	Y+4, r22	; 0x04
    25fe:	4d 83       	std	Y+5, r20	; 0x05
    2600:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t Loop;

	HAL_LCD_voidWriteCommand(0x40+(0x08*Copy_BlockNum));
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	08 96       	adiw	r24, 0x08	; 8
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
	for(Loop = 0 ; Loop < 8 ; Loop++)
    261a:	19 82       	std	Y+1, r1	; 0x01
    261c:	0e c0       	rjmp	.+28     	; 0x263a <HAL_LCD_SpecialChar+0x50>
	{
	HAL_LCD_voidWriteData(arr[Loop]);
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	9b 81       	ldd	r25, Y+3	; 0x03
    2628:	fc 01       	movw	r30, r24
    262a:	e2 0f       	add	r30, r18
    262c:	f3 1f       	adc	r31, r19
    262e:	80 81       	ld	r24, Z
    2630:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <HAL_LCD_voidWriteData>
void HAL_LCD_SpecialChar(uint8_t arr[] , uint8_t Copy_BlockNum ,  uint8_t Copy_Row , uint8_t Copy_Col)
{
	uint8_t Loop;

	HAL_LCD_voidWriteCommand(0x40+(0x08*Copy_BlockNum));
	for(Loop = 0 ; Loop < 8 ; Loop++)
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	8f 5f       	subi	r24, 0xFF	; 255
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	88 30       	cpi	r24, 0x08	; 8
    263e:	78 f3       	brcs	.-34     	; 0x261e <HAL_LCD_SpecialChar+0x34>
	{
	HAL_LCD_voidWriteData(arr[Loop]);
	}


	HAL_LCD_voidMoveCursor(Copy_Row , Copy_Col);
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	6e 81       	ldd	r22, Y+6	; 0x06
    2644:	0e 94 d7 12 	call	0x25ae	; 0x25ae <HAL_LCD_voidMoveCursor>
}
    2648:	26 96       	adiw	r28, 0x06	; 6
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <HAL_LCD_voidShiftCursor>:

void HAL_LCD_voidShiftCursor(uint8_t numofTimes,uint8_t Copy_u8Row){
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	00 d0       	rcall	.+0      	; 0x2660 <HAL_LCD_voidShiftCursor+0x6>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	6a 83       	std	Y+2, r22	; 0x02
	HAL_LCD_voidWriteCommand(0x80+(0x01*numofTimes)+(0x40 * Copy_u8Row));
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	00 24       	eor	r0, r0
    2670:	96 95       	lsr	r25
    2672:	87 95       	ror	r24
    2674:	07 94       	ror	r0
    2676:	96 95       	lsr	r25
    2678:	87 95       	ror	r24
    267a:	07 94       	ror	r0
    267c:	98 2f       	mov	r25, r24
    267e:	80 2d       	mov	r24, r0
    2680:	98 2f       	mov	r25, r24
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	89 0f       	add	r24, r25
    2686:	80 58       	subi	r24, 0x80	; 128
    2688:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>

}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <SPI_Init>:

#include "CPU_CONFIGURATION.h"
#include "SPI.h"

void SPI_Init(void)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPI_PORT, MISO);/*Define direction as input*/
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
	SPCR = 0x53;//0b 0101 0011
	#elif SPI_MODE == SLAVE
	CLR_BIT(SPI_PORT, MOSI);/*Define direction as input*/
    269e:	a7 e3       	ldi	r26, 0x37	; 55
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e7 e3       	ldi	r30, 0x37	; 55
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	8c 93       	st	X, r24
	SET_BIT(SPI_PORT, MISO);/*Define direction as output*/
    26ac:	a7 e3       	ldi	r26, 0x37	; 55
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	e7 e3       	ldi	r30, 0x37	; 55
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	80 64       	ori	r24, 0x40	; 64
    26b8:	8c 93       	st	X, r24
	CLR_BIT(SPI_PORT, CLK);/*Define direction as input*/
    26ba:	a7 e3       	ldi	r26, 0x37	; 55
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	e7 e3       	ldi	r30, 0x37	; 55
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	8f 77       	andi	r24, 0x7F	; 127
    26c6:	8c 93       	st	X, r24
	CLR_BIT(SPI_PORT, SS); /*Define direction as input*/
    26c8:	a7 e3       	ldi	r26, 0x37	; 55
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e7 e3       	ldi	r30, 0x37	; 55
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	8f 7e       	andi	r24, 0xEF	; 239
    26d4:	8c 93       	st	X, r24
	SPCR = 0x43;//0b 0100 0011
    26d6:	ed e2       	ldi	r30, 0x2D	; 45
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	83 e4       	ldi	r24, 0x43	; 67
    26dc:	80 83       	st	Z, r24
	#endif
}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <SPI_Transmit>:
void SPI_Transmit(uint8_t data)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    26f0:	ef e2       	ldi	r30, 0x2F	; 47
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	80 83       	st	Z, r24
	while (GET_BIT(SPSR, SPIF) != 1);
    26f8:	ee e2       	ldi	r30, 0x2E	; 46
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	88 1f       	adc	r24, r24
    2700:	88 27       	eor	r24, r24
    2702:	88 1f       	adc	r24, r24
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	c1 f7       	brne	.-16     	; 0x26f8 <SPI_Transmit+0x14>
}
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <SPI_Receive>:
uint8_t SPI_Receive(void)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(SPSR, SPIF) != 1);
    2718:	ee e2       	ldi	r30, 0x2E	; 46
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	88 1f       	adc	r24, r24
    2720:	88 27       	eor	r24, r24
    2722:	88 1f       	adc	r24, r24
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	c1 f7       	brne	.-16     	; 0x2718 <SPI_Receive+0x8>
	return SPDR;
    2728:	ef e2       	ldi	r30, 0x2F	; 47
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <SPI_SlaveSelect>:
void SPI_SlaveSelect(uint8_t slave)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	0f 92       	push	r0
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	89 83       	std	Y+1, r24	; 0x01
	switch (slave)
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	39 f4       	brne	.+14     	; 0x2758 <SPI_SlaveSelect+0x24>
	{
		case 0:
		CLR_BIT(PORTB, SS);
    274a:	a8 e3       	ldi	r26, 0x38	; 56
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e8 e3       	ldi	r30, 0x38	; 56
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	8f 7e       	andi	r24, 0xEF	; 239
    2756:	8c 93       	st	X, r24
		break;
		case 1:
		break;
	}
}
    2758:	0f 90       	pop	r0
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <main>:
    uint8_t data;

void checkLights(void);
void checkFan(void);

int main(void){
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
	HAL_LCD_Init();
    2768:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <HAL_LCD_Init>
	SPI_Init();
    276c:	0e 94 4b 13 	call	0x2696	; 0x2696 <SPI_Init>

	MCAL_DIO_voidSetPortDirection(DIO_PORTA,DIO_PORT_OUTPUT);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	6f ef       	ldi	r22, 0xFF	; 255
    2774:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPortDirection>


	while(1){
		data=SPI_Receive();
    2778:	0e 94 88 13 	call	0x2710	; 0x2710 <SPI_Receive>
    277c:	80 93 a7 00 	sts	0x00A7, r24
		/**	  code	**/
		voiceCommand[i]=data;
    2780:	80 91 92 00 	lds	r24, 0x0092
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	20 91 a7 00 	lds	r18, 0x00A7
    278c:	fc 01       	movw	r30, r24
    278e:	ed 56       	subi	r30, 0x6D	; 109
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	20 83       	st	Z, r18
		i++;
    2794:	80 91 92 00 	lds	r24, 0x0092
    2798:	8f 5f       	subi	r24, 0xFF	; 255
    279a:	80 93 92 00 	sts	0x0092, r24
		checkLights();
    279e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <checkLights>
		checkFan();
    27a2:	0e 94 46 14 	call	0x288c	; 0x288c <checkFan>
    27a6:	e8 cf       	rjmp	.-48     	; 0x2778 <main+0x18>

000027a8 <checkLights>:
}




void checkLights(void){
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	if(strcmp((char*)lightsOn,(char*)voiceCommand)==0)
    27b0:	88 e6       	ldi	r24, 0x68	; 104
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	23 e9       	ldi	r18, 0x93	; 147
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	b9 01       	movw	r22, r18
    27ba:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <strcmp>
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	11 f5       	brne	.+68     	; 0x2806 <checkLights+0x5e>
	{
		MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_0,DIO_HIGH);
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
		MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_2,DIO_HIGH);
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	62 e0       	ldi	r22, 0x02	; 2
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
		MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_3,DIO_HIGH);
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	63 e0       	ldi	r22, 0x03	; 3
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>

		HAL_LCD_voidWriteString(voiceCommand);
    27e0:	83 e9       	ldi	r24, 0x93	; 147
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 ae 12 	call	0x255c	; 0x255c <HAL_LCD_voidWriteString>
		memset(voiceCommand,0,strlen((char*)voiceCommand));// clear voiceCommand
    27e8:	83 e9       	ldi	r24, 0x93	; 147
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <strlen>
    27f0:	9c 01       	movw	r18, r24
    27f2:	83 e9       	ldi	r24, 0x93	; 147
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	a9 01       	movw	r20, r18
    27fc:	0e 94 db 14 	call	0x29b6	; 0x29b6 <memset>
		i=0;
    2800:	10 92 92 00 	sts	0x0092, r1
    2804:	40 c0       	rjmp	.+128    	; 0x2886 <checkLights+0xde>
	}
	else if(strcmp((char*)lightsOff,(char*)voiceCommand)==0)
    2806:	82 e7       	ldi	r24, 0x72	; 114
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	23 e9       	ldi	r18, 0x93	; 147
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	b9 01       	movw	r22, r18
    2810:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <strcmp>
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	11 f5       	brne	.+68     	; 0x285c <checkLights+0xb4>
	{
		MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_0,DIO_LOW);
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
		MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_2,DIO_LOW);
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	62 e0       	ldi	r22, 0x02	; 2
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
		MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_3,DIO_LOW);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	63 e0       	ldi	r22, 0x03	; 3
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
		HAL_LCD_voidWriteString(voiceCommand);
    2836:	83 e9       	ldi	r24, 0x93	; 147
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 ae 12 	call	0x255c	; 0x255c <HAL_LCD_voidWriteString>
		memset(voiceCommand,0,strlen((char*)voiceCommand));// clear voiceCommand
    283e:	83 e9       	ldi	r24, 0x93	; 147
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <strlen>
    2846:	9c 01       	movw	r18, r24
    2848:	83 e9       	ldi	r24, 0x93	; 147
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	a9 01       	movw	r20, r18
    2852:	0e 94 db 14 	call	0x29b6	; 0x29b6 <memset>
		i=0;
    2856:	10 92 92 00 	sts	0x0092, r1
    285a:	15 c0       	rjmp	.+42     	; 0x2886 <checkLights+0xde>
	}
	else if(data=='c')
    285c:	80 91 a7 00 	lds	r24, 0x00A7
    2860:	83 36       	cpi	r24, 0x63	; 99
    2862:	89 f4       	brne	.+34     	; 0x2886 <checkLights+0xde>
	{
		HAL_LCD_voidWriteCommand(1);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
		memset(voiceCommand,0,strlen((char*)voiceCommand));// clear voiceCommand
    286a:	83 e9       	ldi	r24, 0x93	; 147
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <strlen>
    2872:	9c 01       	movw	r18, r24
    2874:	83 e9       	ldi	r24, 0x93	; 147
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	70 e0       	ldi	r23, 0x00	; 0
    287c:	a9 01       	movw	r20, r18
    287e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <memset>
		i=0;
    2882:	10 92 92 00 	sts	0x0092, r1
	}
	else{
	}
}
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <checkFan>:

void checkFan(void){
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
	if(strcmp((char*)voiceCommand,(char*)FanOn)==0)
    2894:	83 e9       	ldi	r24, 0x93	; 147
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	2d e7       	ldi	r18, 0x7D	; 125
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	b9 01       	movw	r22, r18
    289e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <strcmp>
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	c1 f4       	brne	.+48     	; 0x28d6 <checkFan+0x4a>
		{
			MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_1,DIO_HIGH);
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
			HAL_LCD_voidWriteString(voiceCommand);
    28b0:	83 e9       	ldi	r24, 0x93	; 147
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 ae 12 	call	0x255c	; 0x255c <HAL_LCD_voidWriteString>
			memset(voiceCommand,0,strlen((char*)voiceCommand)); // clear voiceCommand
    28b8:	83 e9       	ldi	r24, 0x93	; 147
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <strlen>
    28c0:	9c 01       	movw	r18, r24
    28c2:	83 e9       	ldi	r24, 0x93	; 147
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	a9 01       	movw	r20, r18
    28cc:	0e 94 db 14 	call	0x29b6	; 0x29b6 <memset>
			i=0;
    28d0:	10 92 92 00 	sts	0x0092, r1
    28d4:	36 c0       	rjmp	.+108    	; 0x2942 <checkFan+0xb6>
		}
		else if(strcmp((char*)voiceCommand,(char*)FanOff)==0)
    28d6:	83 e9       	ldi	r24, 0x93	; 147
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	27 e8       	ldi	r18, 0x87	; 135
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	b9 01       	movw	r22, r18
    28e0:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <strcmp>
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	c1 f4       	brne	.+48     	; 0x2918 <checkFan+0x8c>
		{
			MCAL_DIO_voidSetPinValue(DIO_PORTA,DIO_PIN_1,DIO_LOW);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MCAL_DIO_voidSetPinValue>
			HAL_LCD_voidWriteString(voiceCommand);
    28f2:	83 e9       	ldi	r24, 0x93	; 147
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 ae 12 	call	0x255c	; 0x255c <HAL_LCD_voidWriteString>
			memset(voiceCommand,0,strlen((char*)voiceCommand));// clear voiceCommand
    28fa:	83 e9       	ldi	r24, 0x93	; 147
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <strlen>
    2902:	9c 01       	movw	r18, r24
    2904:	83 e9       	ldi	r24, 0x93	; 147
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	70 e0       	ldi	r23, 0x00	; 0
    290c:	a9 01       	movw	r20, r18
    290e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <memset>
			i=0;
    2912:	10 92 92 00 	sts	0x0092, r1
    2916:	15 c0       	rjmp	.+42     	; 0x2942 <checkFan+0xb6>
		}
		else if(data=='c')
    2918:	80 91 a7 00 	lds	r24, 0x00A7
    291c:	83 36       	cpi	r24, 0x63	; 99
    291e:	89 f4       	brne	.+34     	; 0x2942 <checkFan+0xb6>
		{
			HAL_LCD_voidWriteCommand(1);
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HAL_LCD_voidWriteCommand>
			memset(voiceCommand,0,strlen((char*)voiceCommand));// clear voiceCommand
    2926:	83 e9       	ldi	r24, 0x93	; 147
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <strlen>
    292e:	9c 01       	movw	r18, r24
    2930:	83 e9       	ldi	r24, 0x93	; 147
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	a9 01       	movw	r20, r18
    293a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <memset>
			i=0;
    293e:	10 92 92 00 	sts	0x0092, r1
		}
		else{
		}
}
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <__prologue_saves__>:
    2948:	2f 92       	push	r2
    294a:	3f 92       	push	r3
    294c:	4f 92       	push	r4
    294e:	5f 92       	push	r5
    2950:	6f 92       	push	r6
    2952:	7f 92       	push	r7
    2954:	8f 92       	push	r8
    2956:	9f 92       	push	r9
    2958:	af 92       	push	r10
    295a:	bf 92       	push	r11
    295c:	cf 92       	push	r12
    295e:	df 92       	push	r13
    2960:	ef 92       	push	r14
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	ca 1b       	sub	r28, r26
    2972:	db 0b       	sbc	r29, r27
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	09 94       	ijmp

00002980 <__epilogue_restores__>:
    2980:	2a 88       	ldd	r2, Y+18	; 0x12
    2982:	39 88       	ldd	r3, Y+17	; 0x11
    2984:	48 88       	ldd	r4, Y+16	; 0x10
    2986:	5f 84       	ldd	r5, Y+15	; 0x0f
    2988:	6e 84       	ldd	r6, Y+14	; 0x0e
    298a:	7d 84       	ldd	r7, Y+13	; 0x0d
    298c:	8c 84       	ldd	r8, Y+12	; 0x0c
    298e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2990:	aa 84       	ldd	r10, Y+10	; 0x0a
    2992:	b9 84       	ldd	r11, Y+9	; 0x09
    2994:	c8 84       	ldd	r12, Y+8	; 0x08
    2996:	df 80       	ldd	r13, Y+7	; 0x07
    2998:	ee 80       	ldd	r14, Y+6	; 0x06
    299a:	fd 80       	ldd	r15, Y+5	; 0x05
    299c:	0c 81       	ldd	r16, Y+4	; 0x04
    299e:	1b 81       	ldd	r17, Y+3	; 0x03
    29a0:	aa 81       	ldd	r26, Y+2	; 0x02
    29a2:	b9 81       	ldd	r27, Y+1	; 0x01
    29a4:	ce 0f       	add	r28, r30
    29a6:	d1 1d       	adc	r29, r1
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	ed 01       	movw	r28, r26
    29b4:	08 95       	ret

000029b6 <memset>:
    29b6:	dc 01       	movw	r26, r24
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <memset+0x6>
    29ba:	6d 93       	st	X+, r22
    29bc:	41 50       	subi	r20, 0x01	; 1
    29be:	50 40       	sbci	r21, 0x00	; 0
    29c0:	e0 f7       	brcc	.-8      	; 0x29ba <memset+0x4>
    29c2:	08 95       	ret

000029c4 <strcmp>:
    29c4:	fb 01       	movw	r30, r22
    29c6:	dc 01       	movw	r26, r24
    29c8:	8d 91       	ld	r24, X+
    29ca:	01 90       	ld	r0, Z+
    29cc:	80 19       	sub	r24, r0
    29ce:	01 10       	cpse	r0, r1
    29d0:	d9 f3       	breq	.-10     	; 0x29c8 <strcmp+0x4>
    29d2:	99 0b       	sbc	r25, r25
    29d4:	08 95       	ret

000029d6 <strlen>:
    29d6:	fc 01       	movw	r30, r24
    29d8:	01 90       	ld	r0, Z+
    29da:	00 20       	and	r0, r0
    29dc:	e9 f7       	brne	.-6      	; 0x29d8 <strlen+0x2>
    29de:	80 95       	com	r24
    29e0:	90 95       	com	r25
    29e2:	8e 0f       	add	r24, r30
    29e4:	9f 1f       	adc	r25, r31
    29e6:	08 95       	ret

000029e8 <_exit>:
    29e8:	f8 94       	cli

000029ea <__stop_program>:
    29ea:	ff cf       	rjmp	.-2      	; 0x29ea <__stop_program>
